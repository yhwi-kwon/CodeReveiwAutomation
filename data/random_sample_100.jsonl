{"id":70752,"task":"C2NL","work":4,"category":"C","input_code":"@@ -34,7 +34,7 @@ import static org.apache.iceberg.TableProperties.DEFAULT_NAME_MAPPING;\n \/**\n  * Context object with optional arguments for a Flink Scan.\n  *\/\n-class ScanContext implements Serializable {\n+public class ScanContext implements Serializable {\n \n   private static final long serialVersionUID = 1L;","input_nl":null,"output":"Why make this `public`? It should not be used outside this class.","target":"Why do we need to make so much more of this ScanContext public?","labels":"object design principles -> encapsulation and scope -> change class visibility","first_category":"object design principles"}
{"id":51647,"task":"C2NL","work":4,"category":"W","input_code":"@@ -193,6 +193,18 @@ public abstract class Either<L, R> implements io.vavr.Iterable<R>, io.vavr.Value\n     \/**\n      * Maps either the left or the right side of this disjunction.\n      *\n+     * <pre>{@code\n+     *Either<?, AtomicInteger> success = Either.right(new AtomicInteger(42));\n+     *\n+     * \/\/prints \"Right(42)\"\n+     * System.out.println(success.bimap(Function1.identity(), AtomicInteger::get));\n+     *\n+     * Either<Exception, ?> failure = Either.left(new Exception(\"error\"));\n+     *\n+     * \/\/prints \"Left(error)\"\n+     * System.out.println(failure.bimap(Exception::getMessage, Function1.identity()));\n+     * }<\/pre>\n+     *\n      * @param leftMapper  maps the left value if this is a Left\n      * @param rightMapper maps the right value if this is a Right\n      * @param <X>         The new left type of the resulting Either","input_nl":null,"output":"Could you remove these `<pre>` tags?","target":"one space missing at the beginning","labels":"refactoring -> readability -> improve formatting -> add\/remove white space(s)\nrefactoring -> readability -> improve formatting","first_category":"refactoring;refactoring"}
{"id":51240,"task":"C2NL","work":4,"category":"W","input_code":"@@ -296,9 +296,17 @@ public class NavListAdapter extends BaseAdapter\n                 .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n \n         convertView = inflater.inflate(R.layout.nav_section_item, parent, false);\n+        TextView feedsFilteredMsg = convertView.findViewById(R.id.nav_feeds_filtered_message);\n \n-        convertView.setEnabled(false);\n-        convertView.setOnClickListener(null);\n+        if (UserPreferences.getFeedFilter() != UserPreferences.FEED_FILTER_NONE) {\n+            convertView.setEnabled(true);\n+            feedsFilteredMsg.setText(\"{md-info-outline} \" + context.getString(R.string.feed_is_filtered));\n+            Iconify.addIcons(feedsFilteredMsg);\n+            feedsFilteredMsg.setVisibility(View.VISIBLE);\n+        } else {\n+            convertView.setEnabled(false);\n+            feedsFilteredMsg.setVisibility(View.GONE);\n+        }\n \n         return convertView;\n     }","input_nl":null,"output":"You can use `String.format` here.","target":"There is an option to hide the subscriptions list from the sidebar. If it is hidden, the filter text should not be displayed.","labels":"bug-fixing -> fix wrong behavior","first_category":"bug-fixing"}
{"id":52729,"task":"C2NL","work":4,"category":"W","input_code":"@@ -184,7 +184,7 @@ public class PrivateTransactionProcessor {\n       messageFrameStack.addFirst(initialFrame);\n \n       while (!messageFrameStack.isEmpty()) {\n-        process(messageFrameStack.peekFirst(), operationTracer);\n+        process(messageFrameStack.peekFirst(), OperationTracer.NO_TRACING);\n       }\n \n       if (initialFrame.getState() == MessageFrame.State.COMPLETED_SUCCESS) {","input_nl":null,"output":"Why NO_TRACING instead of TRACLE ?","target":"The operationTracer is passed into the processTransaction() method. We should probably pass the no tracing in one in from where it is called.","labels":"bug-fixing -> fix wrong behavior -> modify method call parameters","first_category":"bug-fixing"}
{"id":51308,"task":"C2NL","work":4,"category":"W","input_code":"@@ -67,4 +67,11 @@ public interface ActionsProvider {\n   default ExpireSnapshots expireSnapshots(Table table) {\n     throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement expireSnapshots\");\n   }\n+\n+  \/**\n+   * Instantiates an action to remove all the files referenced by given metadata location.\n+   *\/\n+  default RemoveFiles removeFiles(String metadataLocation) {\n+    throw new UnsupportedOperationException(this.getClass().getName() + \" does not implement expireSnapshots\");\n+  }\n }","input_nl":null,"output":"What do you think about calling it `removeAllFiles` instead of `removeFiles`?","target":"Looks like there is a typo: `expireSnapshots` -> `removeFiles` or whatever name we go with.","labels":"refactoring -> readability -> improve string literals","first_category":"refactoring"}
{"id":70696,"task":"C2NL","work":4,"category":"C","input_code":"@@ -206,6 +206,18 @@ public interface Tree<T> extends Traversable<T>, Serializable {\n         return io.vavr.collection.Collections.fill(n, s, empty(), Tree::of);\n     }\n \n+    \/**\n+     * Returns a Tree containing {@code n} times the given {@code element}\n+     *\n+     * @param <T>     Component type of the Tree\n+     * @param n       The number of elements in the Tree\n+     * @param element The element\n+     * @return A Tree of size {@code n}, where each element is the given {@code element}.\n+     *\/\n+    static <T> Tree<T> fill(int n, T element) {\n+        return io.vavr.collection.Collections.fillObject(n, element, empty(), Tree::of);\n+    }\n+\n     \/**\n      * Recursively builds a non-empty {@code Tree}, starting with the given {@code seed} value and proceeding in depth-first order.\n      * <p>","input_nl":null,"output":"`where each element is the given {@code element}`","target":"(...), where each element ~are~ **is the** given {\\@code element}.","labels":"documentation -> improve behavior description","first_category":"documentation"}
{"id":51378,"task":"C2NL","work":4,"category":"W","input_code":"@@ -56,7 +56,7 @@ public abstract class NodeGenerator extends Generator {\n                     throw new AssertionError(f(\"Wanted to regenerate a method with signature %s in %s, but it wasn't there.\", callable.getSignature(), containingClassOrInterface.getNameAsString()));\n                 });\n     }\n-\n+    \n     private void addMethod(\n             ClassOrInterfaceDeclaration containingClassOrInterface,\n             CallableDeclaration<?> callable,","input_nl":null,"output":"unnecessary empty lines","target":"Wearing my extra-douche-bag hat I would say not spaces on a blank line. Maybe at some point we could have some automated process remove these things. For now I would not bother changing it.","labels":"refactoring -> readability -> improve formatting -> add\/remove white space(s)","first_category":"refactoring"}
{"id":52744,"task":"C2NL","work":4,"category":"W","input_code":"@@ -16,9 +16,10 @@ package org.hyperledger.besu.ethereum.mainnet.precompiles;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n-import org.hyperledger.besu.ethereum.core.Gas;\n-import org.hyperledger.besu.ethereum.vm.GasCalculator;\n-import org.hyperledger.besu.ethereum.vm.MessageFrame;\n+import org.hyperledger.besu.evm.Gas;\n+import org.hyperledger.besu.evm.frame.MessageFrame;\n+import org.hyperledger.besu.evm.gascalculator.GasCalculator;\n+import org.hyperledger.besu.evm.precompile.AltBN128PairingPrecompiledContract;\n \n import org.apache.tuweni.bytes.Bytes;\n import org.junit.Test;","input_nl":null,"output":"Is this class still needed?","target":"I noticed in all of these we now have to import the PrecompiledContract under testing. Could also rename the package these are in s\/precompiles\/precompile to keep them in the same package as they are elsewhere.","labels":"refactoring -> renaming -> rename package","first_category":"refactoring"}
{"id":52458,"task":"C2NL","work":4,"category":"W","input_code":"@@ -138,12 +138,13 @@ class SchemaUpdate implements UpdateSchema {\n       parentId = parentField.fieldId();\n       Preconditions.checkArgument(!deletes.contains(parentId),\n           \"Cannot add to a column that will be deleted: %s\", parent);\n-      Preconditions.checkArgument(schema.findField(parent + \".\" + name) == null,\n-          \"Cannot add column, name already exists: %s.%s\", parent, name);\n+      Preconditions.checkArgument(schema.findField(parent + \".\" + name) == null ||\n+                      deletes.contains(schema.findField(parent + \".\" + name).fieldId()),\n+          \"Cannot add column, name already exists and is not being deleted: %s.%s\", parent, name);\n       fullName = schema.findColumnName(parentId) + \".\" + name;\n     } else {\n-      Preconditions.checkArgument(schema.findField(name) == null,\n-          \"Cannot add column, name already exists: %s\", name);\n+      Preconditions.checkArgument(schema.findField(name) == null || deletes.contains(schema.findField(name).fieldId()),\n+          \"Cannot add column, name already exists and is not being deleted: %s\", name);\n       fullName = name;\n     }","input_nl":null,"output":"nit: \"and is not being deleted\" -> \"and is not being deleted\"","target":"Nit: indentation is 2 indents (4 spaces) from the previous line.","labels":"refactoring -> readability -> improve formatting -> add\/remove white space(s)","first_category":"refactoring"}
{"id":52178,"task":"C2NL","work":4,"category":"W","input_code":"@@ -24,11 +24,14 @@ import com.google.gson.annotations.SerializedName;\n public class Internals {\n \n   public static final String SERIALIZED_APPLICATION_SERVER = \"application-server\";\n+  public static final String SERIALIZED_CAMUNDA_INTEGRATION = \"camunda-integration\";\n \n   protected Database database;\n   @SerializedName(value = SERIALIZED_APPLICATION_SERVER)\n   protected ApplicationServer applicationServer;\n   protected Map<String, Command> commands;\n+  @SerializedName(value = SERIALIZED_CAMUNDA_INTEGRATION)\n+  protected Map<String, Object> camundaIntegration;\n \n   protected Map<String, Metric> metrics;","input_nl":null,"output":"`camunda-integration` -> `camunda-integration-config`?","target":"Just an understanding question: do we need a map here, would a list\/set of Strings be sufficient? we are not adding entries with `false` here, are we? Being in the list already means it's used, right?","labels":"refactoring -> typing -> change variable\/constant type","first_category":"refactoring"}
{"id":70741,"task":"C2NL","work":4,"category":"C","input_code":"@@ -0,0 +1,10 @@\n+package org.apache.servicecomb.foundation.vertx;\n+\n+import org.junit.Test;\n+\n+public class MyTest {\n+  @Test\n+  public void myTest() {\n+    System.out.println(System.getProperty(\"java.io.tmpdir\"));\n+  }\n+}","input_nl":null,"output":"Remove this file?","target":"remove temporary code","labels":"refactoring -> readability -> remove unneeded code -> remove deprecated\/dead code","first_category":"refactoring"}
{"id":51340,"task":"C2NL","work":4,"category":"W","input_code":"@@ -136,6 +136,7 @@ public class Name {\n   private String toUnderscore(CaseFormat caseFormat) {\n     List<String> newPieces = new ArrayList<>();\n     for (NamePiece namePiece : namePieces) {\n+      namePiece = replaceAcronyms(namePiece);\n       newPieces.add(namePiece.caseFormat.to(caseFormat, namePiece.identifier));\n     }\n     return Joiner.on('_').join(newPieces);","input_nl":null,"output":"What if the name is a reserved word? e.g. `abbreviate`?","target":"I think it might make more sense to do this in Name.upperCamel; it is the entry point for upper camel strings.","labels":"refactoring -> moving -> move statement between methods","first_category":"refactoring"}
{"id":51877,"task":"C2NL","work":4,"category":"C","input_code":"@@ -104,4 +104,11 @@ public interface Snapshot {\n    * @return the location of the manifest list for this Snapshot\n    *\/\n   String manifestListLocation();\n+\n+  \/**\n+   * Return this snapshot's sequence number, or 0 if the table has no snapshot yet.\n+   *\n+   * @return the sequence number of this Snapshot\n+   *\/\n+  Long sequenceNumber();\n }","input_nl":null,"output":"When would this be 0?","target":"In which case will this actually return 0? If there is no snapshot, then there is no `Snapshot` object, right?","labels":"documentation -> improve behavior description","first_category":"documentation"}
{"id":52585,"task":"C2NL","work":4,"category":"W","input_code":"@@ -831,6 +831,13 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n       arity = \"1\")\n   private final Wei txFeeCap = DEFAULT_RPC_TX_FEE_CAP;\n \n+  @Option(\n+      names = {\"--rpc-allow-unprotected-txs\"},\n+      description =\n+          \"Allow for unprotected (non EIP155 signed) transactions to be submitted via RPC (default: ${DEFAULT-VALUE})\",\n+      arity = \"1\")\n+  private final Boolean unprotectedTransactionsAllowed = false;\n+\n   @Option(\n       names = {\"--min-block-occupancy-ratio\"},\n       description = \"Minimum occupancy ratio for a mined block (default: ${DEFAULT-VALUE})\",","input_nl":null,"output":"NIT: the default value should be `DEFAULT_RPC_UNPROTECTED_TXS`","target":"This breaks backwards compatibility, so it will have to wait for the next quarterly release of the default is to deny. I would recommend adding the flag with the default to allow and then at the next quarterly release rc cycle flip the flag to deny.","labels":"bug-fixing -> ensure backward compatibility","first_category":"bug-fixing"}
{"id":70773,"task":"C2NL","work":4,"category":"C","input_code":"@@ -19,6 +19,7 @@ package azkaban.executor;\n public class ExecutionReference {\n   private final int execId;\n   private Executor executor;\n+  \/\/Todo jamiesjc: deprecate updateTime in ExecutionReference class gradually.\n   private long updateTime;\n   private long nextCheckTime = -1;\n   private int numErrors = 0;","input_nl":null,"output":"We need to deprecate the `updateTime` as well.","target":"should we consider add deprecated annotation here?","labels":"other -> add annotation","first_category":"other"}
{"id":52254,"task":"C2NL","work":4,"category":"W","input_code":"@@ -320,7 +320,7 @@ public class Spark3Util {\n     }\n   }\n \n-  private static DistributionMode getDistributionMode(org.apache.iceberg.Table table) {\n+  public static DistributionMode getDistributionMode(org.apache.iceberg.Table table) {\n     boolean isSortedTable = !table.sortOrder().isUnsorted();\n     String defaultModeName = isSortedTable ? WRITE_DISTRIBUTION_MODE_RANGE : WRITE_DISTRIBUTION_MODE_DEFAULT;\n     String modeName = table.properties().getOrDefault(WRITE_DISTRIBUTION_MODE, defaultModeName);","input_nl":null,"output":"Why does this need to be public? I don't see it used outside this class","target":"Minor: If this is going to be public, we should fix the name. `get` doesn't add any value. How about `distributionModeFor` instead?","labels":"refactoring -> renaming -> rename method","first_category":"refactoring"}
{"id":52416,"task":"C2NL","work":4,"category":"W","input_code":"@@ -628,7 +628,10 @@ public class ClientManager {\n                     Log.w(\"AccMgrAuthTokenProvider:fetchNewAuthToken\", \"accountManager.getAuthToken returned null bundle\");\n                 } else {\n                     newAuthToken = bundle.getString(AccountManager.KEY_AUTHTOKEN);\n-                    newInstanceUrl = bundle.getString(AuthenticatorService.KEY_INSTANCE_URL);\n+                    final String encryptedInstanceUrl = bundle.getString(AuthenticatorService.KEY_INSTANCE_URL);\n+                    if (encryptedInstanceUrl != null) {\n+                        newInstanceUrl = SalesforceSDKManager.decryptWithPasscode(encryptedInstanceUrl, SalesforceSDKManager.getInstance().getPasscodeHash());\n+                    }\n                     Intent broadcastIntent;\n                     if (newAuthToken == null) {\n                         if (clientManager.revokedTokenShouldLogout) {","input_nl":null,"output":"Why not use `AuthenticatorService.KEY_INSTANCE_URL` here?","target":"We send the `instanceUrl` encrypted, but never bothered to decrypt it. I guess it was working because we never did any org split testing where the `instanceUrl` actually changes.","labels":"bug-fixing -> fix wrong behavior","first_category":"bug-fixing"}
{"id":51419,"task":"C2NL","work":4,"category":"C","input_code":"@@ -1,6 +1,8 @@\n package de.danoeh.antennapod.adapter;\n \n import android.content.Context;\n+import android.view.View;\n+\n import androidx.appcompat.app.AlertDialog;\n \n import de.danoeh.antennapod.R;","input_nl":null,"output":"Revert this change","target":"Please revert the lines above. Not touching unrelated code keeps the git history clean.","labels":"other -> process -> revert code change","first_category":"other"}
{"id":70776,"task":"C2NL","work":4,"category":"C","input_code":"@@ -7,6 +7,7 @@ import android.content.Intent;\n import android.content.SharedPreferences;\n import android.content.res.Configuration;\n import android.database.DataSetObserver;\n+import android.graphics.Color;\n import android.os.Build;\n import android.os.Bundle;\n import android.os.Handler;","input_nl":null,"output":"nit: unused import","target":"Please remove the unused imports :)","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded import","first_category":"refactoring"}
{"id":52626,"task":"C2NL","work":4,"category":"W","input_code":"@@ -109,12 +109,12 @@ final class DeFramer extends ByteToMessageDecoder {\n         try {\n           peerInfo = HelloMessage.readFrom(message).getPeerInfo();\n         } catch (final RLPException e) {\n-          LOG.debug(\"Received invalid HELLO message\", e);\n+          LOG.warn(\"Received invalid HELLO message, set log level to TRACE for message body\", e);\n           connectFuture.completeExceptionally(e);\n           ctx.close();\n           return;\n         }\n-        LOG.debug(\"Received HELLO message: {}\", peerInfo);\n+        LOG.trace(\"Received HELLO message: {}\", peerInfo);\n         if (peerInfo.getVersion() >= 5) {\n           LOG.trace(\"Enable compression for p2pVersion: {}\", peerInfo.getVersion());\n           framer.enableCompression();","input_nl":null,"output":"set log level to WARN for message body?","target":"Are we sure that passing this log in warning does not risk spamming the logs of a node running on the mainnet or on ropsten etc ? Do we often receive invalid messages of this type ?","labels":"logging -> change log level","first_category":"logging"}
{"id":52046,"task":"C2NL","work":4,"category":"W","input_code":"@@ -105,4 +105,9 @@ public class S3FileIO implements FileIO {\n     this.awsClientFactory = AwsClientFactories.from(properties);\n     this.s3 = awsClientFactory::s3;\n   }\n+\n+  @Override\n+  public void close() {\n+    client().close();\n+  }\n }","input_nl":null,"output":"do we want to call `super.close()` ?","target":"Since we'e not 100% sure if `close` will be called more than once, should we set `client` to `null` or add an `AtomicBoolean closed` that will then handle the idempotency issue?","labels":"concurrency -> fix concurrency issue","first_category":"concurrency"}
{"id":52500,"task":"C2NL","work":4,"category":"W","input_code":"@@ -7,9 +7,8 @@ package net.sourceforge.pmd.lang.java.ast;\n \n import java.util.List;\n \n-public class ASTAnnotationTypeDeclaration extends AbstractJavaAccessTypeNode implements ASTAnyTypeDeclaration {\n+public class ASTAnnotationTypeDeclaration extends ASTAnyTypeDeclaration {\n \n-    private JavaQualifiedName qualifiedName;\n \n     public ASTAnnotationTypeDeclaration(int id) {\n         super(id);","input_nl":null,"output":"Shouldn't this be `AbstractJavaAccessTypeNode`?","target":"this is a breaking API change. Do we really need to do it in 6.2.0? Can't we just deprecate the methods?","labels":"bug-fixing -> ensure backward compatibility\nother -> add annotation","first_category":"bug-fixing;other"}
{"id":70706,"task":"C2NL","work":4,"category":"C","input_code":"@@ -16,10 +16,13 @@\n \n package azkaban.database;\n \n+import static azkaban.ServiceProvider.SERVICE_PROVIDER;\n+\n import azkaban.metrics.CommonMetrics;\n import azkaban.utils.Props;\n import java.io.IOException;\n import java.sql.Connection;\n+import javax.inject.Inject;\n import org.apache.commons.dbutils.DbUtils;\n import org.apache.commons.dbutils.QueryRunner;","input_nl":null,"output":"is this used?","target":"What is this used for?","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded import","first_category":"refactoring"}
{"id":52596,"task":"C2NL","work":4,"category":"W","input_code":"@@ -90,9 +90,9 @@ public class KubernetesContainerizedImpl extends EventHandler implements Contain\n   public static final String DEFAULT_POD_NAME_PREFIX = \"fc-dep\";\n   public static final String DEFAULT_SERVICE_NAME_PREFIX = \"fc-svc\";\n   public static final String DEFAULT_CLUSTER_NAME = \"azkaban\";\n-  public static final String CPU_LIMIT = \"4\";\n+  public static final String DEFAULT_MAX_CPU = \"0\";\n+  public static final String DEFAULT_MAX_MEMORY = \"0Gi\";\n   public static final String DEFAULT_CPU_REQUEST = \"1\";\n-  public static final String MEMORY_LIMIT = \"64Gi\";\n   public static final String DEFAULT_MEMORY_REQUEST = \"2Gi\";\n   public static final String MAPPING = \"Mapping\";\n   public static final String SERVICE_API_VERSION_2 = \"ambassador\/v2\";","input_nl":null,"output":"CPU and memory limit are not used anymore?","target":"Default max cpu should be 8 and memory 64GB","labels":"bug-fixing -> fix wrong behavior -> modify wrong variable initialization","first_category":"bug-fixing"}
{"id":52156,"task":"C2NL","work":4,"category":"W","input_code":"@@ -2139,7 +2139,7 @@ public class DBService {\n                 Role templateRole = updateTemplateRole(role, domainName, roleName, templateParams);\n                 firstEntry = auditLogSeparator(auditDetails, firstEntry);\n                 auditDetails.append(\" \\\"add-role\\\": \");\n-                if (!processRole(con, originalRole, domainName, roleName, templateRole,\n+                if (!processRole(con, originalRole, domainName, ZMSUtils.removeDomainPrefix(templateRole.getName(), domainName, ROLE_PREFIX), templateRole,\n                         admin, auditRef, true, auditDetails)) {\n                     return false;\n                 }","input_nl":null,"output":"is it possible that `templateRole` is null?","target":"I don't believe the change is sufficient to correctly handle variable substitutions in the name. As part of the process command we pass the original role object that was retreived without taking into account the substitution. So while the first template apply command will work fine because the original role does not exist thus it's a new add operation, if you try to re-apply the same template again, we'll pick up and process a wrong original name thus we'll try to execute an add operation again instead of modify. So we need to take into account the substituted name when we retrieve the original role as well. Same change should be applied to both policy and service blocks as well.","labels":"bug-fixing -> improve code robustness","first_category":"bug-fixing"}
{"id":51332,"task":"C2NL","work":4,"category":"W","input_code":"@@ -619,6 +619,14 @@ class WebDriver(object):\n         else:\n             return self.execute(Command.GET_WINDOW_HANDLES)['value']\n \n+    def minimize_window(self):\n+        \"\"\"\n+        Miniimizes the current window that webdriver is using\n+        \"\"\"\n+        if self.w3c:\n+            command = Command.W3C_MINIMIZE_WINDOW\n+            self.execute(command, {\"windowHandle\": \"current\"})\n+\n     def maximize_window(self):\n         \"\"\"\n         Maximizes the current window that webdriver is using","input_nl":null,"output":"Shouldn't this be `self.execute(command, {\"windowHandle\": \"current\"})`?","target":"This `if` is not necessary","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded statement","first_category":"refactoring"}
{"id":52420,"task":"C2NL","work":4,"category":"C","input_code":"@@ -43,11 +43,7 @@ import org.apache.lucene.index.SortedSetDocValues;\n import org.apache.lucene.index.TermsEnum;\n import org.apache.lucene.search.DocIdSetIterator;\n import org.apache.lucene.search.SortedSetSelector;\n-import org.apache.lucene.store.ByteBuffersDataOutput;\n-import org.apache.lucene.store.ByteBuffersIndexOutput;\n-import org.apache.lucene.store.ChecksumIndexInput;\n-import org.apache.lucene.store.IOContext;\n-import org.apache.lucene.store.IndexOutput;\n+import org.apache.lucene.store.*;\n import org.apache.lucene.util.ArrayUtil;\n import org.apache.lucene.util.BytesRef;\n import org.apache.lucene.util.BytesRefBuilder;","input_nl":null,"output":"Please avoid star imports.","target":"hmmm did this pass spotless check? I don't think we typically use wildcard imports","labels":"refactoring -> imports -> avoid wildcard imports","first_category":"refactoring"}
{"id":51938,"task":"C2NL","work":4,"category":"C","input_code":"@@ -54,10 +54,7 @@ import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbEntityOperation;\n import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbOperation;\n import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbOperation.State;\n import org.camunda.bpm.engine.impl.db.entitymanager.operation.DbOperationType;\n-import org.camunda.bpm.engine.impl.util.DatabaseUtil;\n-import org.camunda.bpm.engine.impl.util.ExceptionUtil;\n-import org.camunda.bpm.engine.impl.util.IoUtil;\n-import org.camunda.bpm.engine.impl.util.ReflectUtil;\n+import org.camunda.bpm.engine.impl.util.*;\n \n \/**\n *","input_nl":null,"output":"No wildcard imports, please.","target":"Please avoid wildcard imports.","labels":"refactoring -> imports -> avoid wildcard imports","first_category":"refactoring"}
{"id":51979,"task":"C2NL","work":4,"category":"W","input_code":"@@ -637,7 +637,7 @@ public class ScheduleServlet extends LoginAbstractAzkabanServlet {\n     if (flow == null) {\n       ret.put(\"status\", \"error\");\n       ret.put(\"message\", \"Flow \" + flowName + \" cannot be found in project \"\n-          + project);\n+          + projectName);\n       return;\n     }","input_nl":null,"output":"Might be better to use `String.format` here?","target":"I am not sure why the API requires both project name and project ID as inputs. Wouldn't it introduce more opportunities for clients to make mistakes?","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded parameter","first_category":"refactoring"}
{"id":51761,"task":"C2NL","work":4,"category":"W","input_code":"@@ -115,6 +115,10 @@ public enum JsonRpcError {\n   DECODE_ERROR(-50100, \"Unable to decode the private signed raw transaction\"),\n   GET_PRIVATE_TRANSACTION_NONCE_ERROR(-50100, \"Unable to determine nonce for account in group.\"),\n \n+  \/\/ Privacy multi-tenancy errors\n+  PRIVACY_MULTI_TENANCY_NO_TOKEN(-50100, \"No token provided\"),\n+  PRIVACY_MULTI_TENANCY_NO_ENCLAVE_PUBLIC_KEY(-50100, \"No privacy enclave public key\"),\n+\n   CANT_CONNECT_TO_LOCAL_PEER(-32100, \"Cannot add local node as peer.\"),\n \n   \/\/ Invalid input errors","input_nl":null,"output":"The error code should be something like `PRIVACY_PRIVACY_NO_TOKEN_ERROR`","target":"nit: Is this actually just a http \"unauthorised\" response? Or is that too vague? If this is the right way to go ... is \"token\" the right word\" Or do we want to say something else?","labels":"refactoring -> readability -> improve string literals","first_category":"refactoring"}
{"id":52760,"task":"C2NL","work":4,"category":"W","input_code":"@@ -831,6 +831,14 @@ public class BesuCommand implements DefaultCommandValues, Runnable {\n       arity = \"1\")\n   private final Wei txFeeCap = DEFAULT_RPC_TX_FEE_CAP;\n \n+  @Option(\n+      names = {\"--rpc-require-chainid-in-txs\"},\n+      description =\n+          \"Allow for unprotected (non EIP155 signed) transactions to be submitted via RPC (default: ${DEFAULT-VALUE})\",\n+      arity = \"1\")\n+  \/\/ TODO: set default to false for next major release\n+  private final Boolean unprotectedTransactionsAllowed = true;\n+\n   @Option(\n       names = {\"--min-block-occupancy-ratio\"},\n       description = \"Minimum occupancy ratio for a mined block (default: ${DEFAULT-VALUE})\",","input_nl":null,"output":"`unprotectedTransactionsAllowed` -> `unprotectedTransactions`?","target":"This looks inverted to me: if `--rpc-require-chainid-in-txs=true`, then shouldn't `unprotectedTransactionsAllowed == false`? Suggest changing this variable to `requireTxReplayProtection` or similar. I think the flag name could be clearer as well, maybe: `--require-tx-replay-protection`.","labels":"other -> replace annotation","first_category":"other"}
{"id":51610,"task":"C2NL","work":4,"category":"W","input_code":"@@ -60,8 +60,11 @@ public class ITZipkinMetricsHealth {\n   }\n \n   @Test public void healthIsOK() throws Exception {\n-    assertThat(get(\"\/health\").isSuccessful())\n-      .isTrue();\n+    Response check = get(\"\/health\");\n+    assertThat(check.isSuccessful()).isTrue();\n+    assertThat(check.body().string()).isEqualTo(\n+      \"{\\\"status\\\":\\\"UP\\\",\\\"zipkin\\\":{\\\"status\\\":\\\"UP\\\",\\\"details\\\":{\\\"InMemoryStorage{}\\\":{\\\"status\\\":\\\"UP\\\"}}}}\"\n+    );\n \n     \/\/ ensure we don't track health in prometheus\n     assertThat(scrape())","input_nl":null,"output":"Nit: It would be better to use `assertThat(check.body().string()).isEqualTo`","target":"in preparation of directly writing the \/health endpoint one day.. we should have content checks.","labels":"testing -> expand scope of test case","first_category":"testing"}
{"id":52120,"task":"C2NL","work":4,"category":"C","input_code":"@@ -58,8 +58,8 @@ public class DataReader<T> implements DatumReader<T> {\n   }\n \n   @Override\n-  public void setSchema(Schema fileSchema) {\n-    this.fileSchema = Schema.applyAliases(fileSchema, readSchema);\n+  public void setSchema(Schema schema) {\n+    this.fileSchema = Schema.applyAliases(schema, readSchema);\n   }\n \n   @Override","input_nl":null,"output":"Should fileSchema be renamed as well?","target":"I believe in previous PRs @mccheah frequently used `fileSchema` -> `newFileSchema` type of renames to avoid hiding fields in builders. Would it make sense to make it consistent?","labels":"refactoring -> renaming -> rename variable\/constant","first_category":"refactoring"}
{"id":51523,"task":"C2NL","work":4,"category":"W","input_code":"@@ -310,6 +310,10 @@ class DBUpgrader {\n             db.execSQL(\"ALTER TABLE \" + PodDBAdapter.TABLE_NAME_FEEDS +\n                     \" ADD COLUMN \" + PodDBAdapter.KEY_FEED_SKIP_ENDING + \" INTEGER DEFAULT 0;\");\n         }\n+        if (oldVersion < 1090001) { \/\/ fixme \/ todo: fix  version\n+            db.execSQL(\"ALTER TABLE \" + PodDBAdapter.TABLE_NAME_FEEDS +\n+                    \" ADD COLUMN \" + PodDBAdapter.KEY_EPISODE_NOTIFICATION + \" INTEGER DEFAULT 0;\");\n+        }\n     }\n \n }","input_nl":null,"output":"please fix version number","target":"It's stored in `PodDBAdapter.VERSION`. I usually use the expected release version code for that change. As this will be released in AntennaPod 2.2.0, the code would be `2020000`.","labels":"bug-fixing -> fix wrong behavior -> modify if condition","first_category":"bug-fixing"}
{"id":51313,"task":"C2NL","work":4,"category":"W","input_code":"@@ -69,7 +69,7 @@ class GenericDataFile\n   \/**\n    * Used by Avro reflection to instantiate this class when reading manifest files.\n    *\/\n-  public GenericDataFile(org.apache.avro.Schema avroSchema) {\n+  GenericDataFile(org.apache.avro.Schema avroSchema) {\n     this.avroSchema = avroSchema;\n \n     Types.StructType schema = AvroSchemaUtil.convert(avroSchema).asNestedType().asStructType();","input_nl":null,"output":"Why did you remove the `public` keyword?","target":"This needs to be public so that Avro can call it.","labels":"object design principles -> encapsulation and scope -> change method visibility","first_category":"object design principles"}
{"id":52186,"task":"C2NL","work":4,"category":"W","input_code":"@@ -34,6 +34,7 @@ public abstract class BaseColumnIterator {\n   protected long triplesRead = 0L;\n   protected long advanceNextPageCount = 0L;\n   protected Dictionary dictionary;\n+  protected long rowPosition;\n \n   protected BaseColumnIterator(ColumnDescriptor descriptor) {\n     this.desc = descriptor;","input_nl":null,"output":"Could this be `final`?","target":"Is this needed? I don't see any uses.","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded statement","first_category":"refactoring"}
{"id":52477,"task":"C2NL","work":4,"category":"W","input_code":"@@ -100,6 +100,13 @@ class CppGenerator : public BaseGenerator {\n \n     assert(!cur_name_space_);\n \n+    code_ += \"#if defined(_MSC_VER)\";\n+    code_ += \"#define NOEXCEPT\";\n+    code_ += \"#else\";\n+    code_ += \"#define NOEXCEPT noexcept\";\n+    code_ += \"#endif\";\n+    code_ += \"\";\n+\n     \/\/ Generate forward declarations for all structs\/tables, since they may\n     \/\/ have circular references.\n     for (auto it = parser_.structs_.vec.begin();","input_nl":null,"output":"Shouldn't this be `#ifdef _MSC_VER`?","target":"rather than generate code for this every time, stick it in `flatbuffers.h` (and call it `FLATBUFFERS_NOEXCEPT` to avoid clashes).","labels":"refactoring -> performance -> optimize performance","first_category":"refactoring"}
{"id":52122,"task":"C2NL","work":4,"category":"W","input_code":"@@ -158,7 +158,7 @@ public class MessageCompose extends K9Activity implements OnClickListener,\n             \"com.fsck.k9.activity.MessageCompose.quotedTextFormat\";\n     private static final String STATE_KEY_NUM_ATTACHMENTS_LOADING = \"numAttachmentsLoading\";\n     private static final String STATE_KEY_WAITING_FOR_ATTACHMENTS = \"waitingForAttachments\";\n-\n+    private static final String STATE_FIRST_TIME_EMPTY_SUBJECT = \"firstTimeEmpySubject\";\n     private static final String LOADER_ARG_ATTACHMENT = \"attachment\";\n \n     private static final String FRAGMENT_WAITING_FOR_ATTACHMENT = \"waitingForAttachment\";","input_nl":null,"output":"Let's call this STATE_FIRST_TIME_EMPY_SUBJECT_ADDED to match the existing STATE_KEY_FIRST_TIME_EMPTY_SUBJECT.","target":"Typo, should read `firstTimeEmptySubject`","labels":"bug-fixing -> fix wrong behavior -> modify wrong variable initialization\nrefactoring -> readability -> improve string literals","first_category":"bug-fixing;refactoring"}
{"id":51731,"task":"C2NL","work":4,"category":"W","input_code":"@@ -50,6 +50,12 @@ public class IpPortManager {\n \n   private boolean autoDiscoveryInited = false;\n \n+  private int maxRetryTimes;\n+\n+  public int getMaxRetryTimes() {\n+    return maxRetryTimes;\n+  }\n+\n   public IpPortManager(ServiceRegistryConfig serviceRegistryConfig, InstanceCacheManager instanceCacheManager) {\n     this.serviceRegistryConfig = serviceRegistryConfig;\n     this.instanceCacheManager = instanceCacheManager;","input_nl":null,"output":"Could you please add a doc for this new parameter?","target":"Maybe maxRetryTimes should be bigger than 2. Return Max(maxRestryTime, 2)?","labels":"bug-fixing -> fix wrong behavior -> modify return statement","first_category":"bug-fixing"}
{"id":52392,"task":"C2NL","work":4,"category":"W","input_code":"@@ -26,6 +26,7 @@ public final class CommentPatterns {\n       Pattern.compile(\"\\\\[([^\\\\]]+)\\\\]\\\\((\\\\p{Alpha}+:[^\\\\)]+)\\\\)\");\n   public static final Pattern CLOUD_LINK_PATTERN =\n       Pattern.compile(\"\\\\[([^\\\\]]+)\\\\]\\\\(((?!\\\\p{Alpha}+:)[^\\\\)]+)\\\\)\");\n-  public static final Pattern PROTO_LINK_PATTERN = Pattern.compile(\"\\\\[([^\\\\]]+)\\\\]\\\\[[^\\\\]]*\\\\]\");\n+  public static final Pattern PROTO_LINK_PATTERN =\n+      Pattern.compile(\"\\\\[([^\\\\]]+)\\\\]\\\\[([A-Za-z_][A-Za-z_.0-9]*)*\\\\]\");\n   public static final Pattern HEADLINE_PATTERN = Pattern.compile(\"^#+\", Pattern.MULTILINE);\n }","input_nl":null,"output":"Should this be: `[A-Za-z_][A-Za-z_.0-9]+`?","target":"This doesn't look right. I think what you want here is `\\\\[([^\\\\]]+)\\\\]\\\\[[A-Za-z_][A-Za-z_.0-9]*]*\\\\]`.","labels":"bug-fixing -> fix wrong behavior -> modify method call parameters","first_category":"bug-fixing"}
{"id":51848,"task":"C2NL","work":4,"category":"W","input_code":"@@ -187,7 +187,9 @@ public class OverviewFragment extends Fragment implements View.OnClickListener,\n \n     final Object updateSync = new Object();\n \n-    public enum CHARTTYPE {PRE,BAS, IOB, COB, DEV, SEN};\n+    public enum CHARTTYPE {PRE, BAS, IOB, COB, DEV, SEN}\n+\n+    ;\n     private static final ScheduledExecutorService worker = Executors.newSingleThreadScheduledExecutor();\n     private static ScheduledFuture<?> scheduledUpdate = null;","input_nl":null,"output":"seems like this change is not required","target":"... here the semicolon wanted to run away from the enum ;)","labels":"refactoring -> readability -> improve formatting -> add\/remove white space(s)\nrefactoring -> readability -> improve formatting","first_category":"refactoring;refactoring"}
{"id":52553,"task":"C2NL","work":4,"category":"W","input_code":"@@ -36,8 +36,7 @@ public class GleanMetricsService {\n         } else {\n             GleanMetricsService.stop();\n         }\n-        Configuration config = new Configuration(Configuration.DEFAULT_TELEMETRY_ENDPOINT,\n-                                                 BuildConfig.BUILD_TYPE);\n+        Configuration config = new Configuration();\n         Glean.INSTANCE.initialize(aContext, config);\n     }","input_nl":null,"output":"I think you can remove this line too.","target":"This was just fixed in mozilla-mobile\/android-components#4892. @pocmo is cutting a new Android Components 19 dot release today, so you'll be able to jump to the new version and restore the build type.","labels":"other -> process -> revert code change","first_category":"other"}
{"id":52388,"task":"C2NL","work":4,"category":"W","input_code":"@@ -124,7 +124,10 @@ public final class SegmentInfos implements Cloneable, Iterable<SegmentCommitInfo\n   public static final int VERSION_72 = 8;\n   \/** The version that recorded softDelCount *\/\n   public static final int VERSION_74 = 9;\n-  static final int VERSION_CURRENT = VERSION_74;\n+  \/** The version that recorded nextWriteDocValuesGen *\/\n+  public static final int VERSION_77 = 10;\n+\n+  static final int VERSION_CURRENT = VERSION_77;\n \n   \/** Used to name new segments. *\/\n   public long counter;","input_nl":null,"output":"`nextWriteDocValuesGen` -> `nextWriteDocsGen`?","target":"hmm should this be `VERSION_81` instead?","labels":"refactoring -> renaming -> rename variable\/constant","first_category":"refactoring"}
{"id":51694,"task":"C2NL","work":4,"category":"W","input_code":"@@ -798,6 +798,12 @@ public class CoreContainer {\n     SecurityConfHandler.SecurityConfig securityConfig = securityConfHandler.getSecurityConfig(false);\n     initializeAuthorizationPlugin((Map<String, Object>) securityConfig.getData().get(\"authorization\"));\n     initializeAuthenticationPlugin((Map<String, Object>) securityConfig.getData().get(\"authentication\"));\n+    if (authenticationPlugin != null && authenticationPlugin.plugin.getMetricRegistry() == null) {\n+      authenticationPlugin.plugin.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, \"\/authentication\");\n+    }\n+    if (pkiAuthenticationPlugin != null && pkiAuthenticationPlugin.getMetricRegistry() == null) {\n+      pkiAuthenticationPlugin.initializeMetrics(metricManager, SolrInfoBean.Group.node.toString(), metricTag, \"\/authentication\/pki\");\n+    }\n   }\n \n   private static void checkForDuplicateCoreNames(List<CoreDescriptor> cds) {","input_nl":null,"output":"Shouldn't this be `\/authentication\/pki`?","target":"Is this second check necessary? we know that just after the plugin was created its metricRegistry is null, it's set only after `initializeMetrics` has been called.","labels":"refactoring -> readability -> simplify logic -> simplify if-else statement -> simplify if condition","first_category":"refactoring"}
{"id":52079,"task":"C2NL","work":4,"category":"W","input_code":"@@ -134,9 +134,13 @@ public abstract class DeleteFilter<T> {\n \n       Iterable<CloseableIterable<Record>> deleteRecords = Iterables.transform(deletes,\n           delete -> openDeletes(delete, deleteSchema));\n-      StructLikeSet deleteSet = Deletes.toEqualitySet(\n-          \/\/ copy the delete records because they will be held in a set\n-          CloseableIterable.transform(CloseableIterable.concat(deleteRecords), Record::copy),\n+\n+      \/\/ copy the delete records because they will be held in a set\n+      CloseableIterable<Record> records = CloseableIterable.transform(CloseableIterable.concat(deleteRecords),\n+          Record::copy);\n+\n+      StructLikeSet deleteSet = Deletes.toEqualitySet(CloseableIterable.transform(records,\n+          record -> new InternalRecordWrapper(deleteSchema.asStruct()).wrap(record)),\n           deleteSchema.asStruct());\n \n       Predicate<T> isInDeleteSet = record -> deleteSet.contains(projectRow.wrap(asStructLike(record)));","input_nl":null,"output":"`InternalRecordWrapper` -> `InternalRecord`?","target":"We prefer line wrapping that keeps arguments to the same method aligned rather than aligning arguments to different levels. Here, the lambda to create an `InternalRecordWrapper` is an argument to `transform`, but it is aligned with `deleteSchema.asStruct()` that is an argument to the outer `toEqualitySet` call. Instead, can you add a newline for each argument to `toEqualitySet`? If the line with the lambda is too long, then you can also add a newline for it that it indented from the start of the line with `transform`, so it is clear that it is an argument to `transform` and not `toEqualitySet`.","labels":"refactoring -> readability -> improve formatting","first_category":"refactoring"}
{"id":52072,"task":"C2NL","work":4,"category":"W","input_code":"@@ -58,6 +58,15 @@ public class TableScanUtil {\n \n     Function<FileScanTask, Long> weightFunc = file -> Math.max(file.length(), openFileCost);\n \n+    Preconditions.checkArgument(splitSize > 0,\n+        \"Cannot create a plan with a split size that is not positive, splitSize = %s\", splitSize);\n+\n+    Preconditions.checkArgument(lookback > 0,\n+        \"Cannot create a plan with a lookback that is not positive, lookback = %s\", lookback);\n+\n+    Preconditions.checkArgument(openFileCost >= 0,\n+        \"Cannot create a plan with a openFileCost that is negative, openFileCost = %s\", openFileCost);\n+\n     return CloseableIterable.transform(\n         CloseableIterable.combine(\n             new BinPacking.PackingIterable<>(splitFiles, splitSize, lookback, weightFunc, true),","input_nl":null,"output":"If `openFileCost` is less than 0, should `splitSize` be greater than `splitSize`?","target":"Remove this because we already added it in another pr","labels":"other -> process -> changes to a file should not belong to a pr","first_category":"other"}
{"id":52435,"task":"C2NL","work":4,"category":"W","input_code":"@@ -133,6 +133,15 @@ abstract class SnapshotProducer<ThisT> implements SnapshotUpdate<ThisT> {\n    *\/\n   protected abstract String operation();\n \n+  \/**\n+   * A Long that write sequenceNumber in manifest-list file.\n+   *\n+   * @return a string operation\n+   *\/\n+  protected Long sequenceNumber() {\n+    return null;\n+  }\n+\n   \/**\n    * Validate the current metadata.\n    * <p>","input_nl":null,"output":"missing '.' at end of line.","target":"I think this needs a more specific name, like `sequenceNumberOverride`","labels":"refactoring -> renaming -> rename method","first_category":"refactoring"}
{"id":51596,"task":"C2NL","work":4,"category":"W","input_code":"@@ -125,6 +125,10 @@ public class ProcessBesuNodeRunner implements BesuNodeRunner {\n         params.add(\"--rpc-http-authentication-credentials-file\");\n         params.add(node.jsonRpcConfiguration().getAuthenticationCredentialsFile());\n       }\n+      if (node.jsonRpcConfiguration().getAuthenticationPublicKeyFile() != null) {\n+        params.add(\"--rpc-http-authentication-public-key-file\");\n+        params.add(node.jsonRpcConfiguration().getAuthenticationPublicKeyFile().getAbsolutePath());\n+      }\n     }\n \n     if (node.wsRpcEnabled()) {","input_nl":null,"output":"Why do you use `getAbsolutePath` here?","target":"What if `node.jsonRpcConfiguration().getAuthenticationPublicKeyFile()` is empty string, would that cause a problem here?","labels":"bug-fixing -> fix wrong behavior -> modify if condition","first_category":"bug-fixing"}
{"id":52539,"task":"C2NL","work":4,"category":"W","input_code":"@@ -385,16 +385,8 @@ class SplitOp implements CoreAdminHandler.CoreAdminOp {\n \n       \/\/ compare to current prefix bucket and see if this new term shares the same prefix\n       if (term != null && term.length >= currPrefix.length && currPrefix.length > 0) {\n-        int i = 0;\n-        for (; i < currPrefix.length; i++) {\n-          if (currPrefix.bytes[i] != term.bytes[term.offset + i]) {\n-            break;\n-          }\n-        }\n-\n-        if (i == currPrefix.length) {\n-          \/\/ prefix was the same (common-case fast path)\n-          \/\/ int count = termsEnum.docFreq();\n+        BytesRef termPrefix = new BytesRef(term.bytes, term.offset, currPrefix.length);\n+        if (termPrefix.bytesEquals(currPrefix)) {\n           bucketCount++;  \/\/ use 1 since we are dealing with unique ids\n           continue;\n         }","input_nl":null,"output":"should this be `termPrefix.bytes.equals(currPrefix)` ?","target":"Found a better choice here that doesn't involve object creation: StringHelper.startsWith()","labels":"refactoring -> performance -> optimize performance\nrefactoring -> readability -> remove unneeded code -> remove unneeded object instance","first_category":"refactoring;refactoring"}
{"id":51664,"task":"C2NL","work":4,"category":"W","input_code":"@@ -181,6 +181,12 @@ public class JobCallbackUtil {\n         String headersKeyPerSequence =\n             headersKey.replace(SEQUENCE_TOKEN, sequenceStr);\n         String headersValue = props.get(headersKeyPerSequence);\n+\t\t\n+\t\t\/\/ replace all the tokens in the header\n+\t\tif(headersValue != null)  {\n+\t\t\theadersValue = replaceTokens(headersValue, contextInfo, false);\n+\t\t}\n+\t\t\n         privateLogger.info(\"headers: \" + headersValue);\n         Header[] headers = parseHttpHeaders(headersValue);\n         if (headers != null) {","input_nl":null,"output":"nit: space after `if`","target":"Nit: Please fix indentation (note: Azkaban uses 2 spaces and not tabs).","labels":"refactoring -> readability -> improve formatting -> add\/remove white space(s)\nrefactoring -> readability -> improve formatting","first_category":"refactoring;refactoring"}
{"id":52547,"task":"C2NL","work":4,"category":"W","input_code":"@@ -24,12 +24,13 @@ import java.util.Map;\n import java.util.Set;\n import java.util.TreeSet;\n \n-public class ImportTypeTransformer {\n+public class ImportTypeTransformer implements ImportGenerator {\n   private enum ImportFileType {\n     SERVICE_FILE,\n     PROTO_FILE\n   }\n \n+  @Override\n   public List<ImportTypeView> generateImports(Map<String, TypeAlias> imports) {\n     List<ImportTypeView> generatedImports = new ArrayList<>();\n     for (String key : imports.keySet()) {","input_nl":null,"output":"`ImportGenerator` is an abstract class, so no need to implement it.","target":"I don't think we should have separate \"transformer\" and \"generator\" terms. I would suggest renaming this existing class `ImportTypeTransformer` to `StandardImportTypeTransformer` and renaming the interface `ImportGenerator` to `ImportTypeTransformer`.","labels":"refactoring -> renaming -> rename class","first_category":"refactoring"}
{"id":52049,"task":"C2NL","work":4,"category":"W","input_code":"@@ -0,0 +1,13 @@\n+package com.fsck.k9.widget.list;\n+\n+\n+import android.content.Intent;\n+import android.widget.RemoteViewsService;\n+\n+\n+public class MessageListWidgetService extends RemoteViewsService {\n+    @Override\n+    public RemoteViewsFactory onGetViewFactory(Intent intent) {\n+        return new MessageListRemoteViewFactory(this.getApplicationContext());\n+    }\n+}","input_nl":null,"output":"I don't think you need this class at all, you can just call `getMessageListRemoteViewFactory()`.","target":"`this.` seems unnecessary","labels":"refactoring -> readability -> add\/remove \"this\" keyword","first_category":"refactoring"}
{"id":52143,"task":"C2NL","work":4,"category":"W","input_code":"@@ -125,6 +125,7 @@ public class StorageCallbacksImpl implements StorageCallbacks {\n                     PodDBAdapter.KEY_CHAPTER_TYPE));\n         }\n         if(oldVersion <= 14) {\n+\n             db.execSQL(\"ALTER TABLE \" + PodDBAdapter.TABLE_NAME_FEED_ITEMS\n                     + \" ADD COLUMN \" + PodDBAdapter.KEY_AUTO_DOWNLOAD + \" INTEGER\");\n             db.execSQL(\"UPDATE \" + PodDBAdapter.TABLE_NAME_FEED_ITEMS","input_nl":null,"output":"Can you remove this extra line?","target":"Do we need to increase the DB version? Also, should probably be a constant, no?","labels":"bug-fixing -> fix wrong behavior -> modify if condition\nrefactoring -> readability -> remove magic number\/replace it with constant","first_category":"bug-fixing;refactoring"}
{"id":51723,"task":"C2NL","work":4,"category":"W","input_code":"@@ -200,7 +200,7 @@ public class JsonHttpRemoteConfig {\n     }\n   }\n \n-  private UrlMapper getUrlMapper(String method) {\n+  protected UrlMapper getUrlMapper(String method) {\n     if (\"DELETE\".equals(method)) {\n       return deleteMapper;\n     } else if (\"GET\".equals(method)) {","input_nl":null,"output":"Why protected? Why not package private?","target":"You don't need to expose this method to do what you want. There are already public addNewGetMapping, addNewPostMapping, and addNewDeleteMapping methods.","labels":"object design principles -> encapsulation and scope -> change method visibility","first_category":"object design principles"}
{"id":51771,"task":"C2NL","work":4,"category":"W","input_code":"@@ -452,6 +452,18 @@ public interface Iterator<T> extends java.util.Iterator<T>, Traversable<T> {\n         return io.vavr.collection.Collections.fill(n, s);\n     }\n \n+    \/**\n+     * Returns a Iterator containing {@code n} times the given {@code element}\n+     *\n+     * @param <T>     Component type of the Iterator\n+     * @param n       The number of elements\n+     * @param element The element\n+     * @return An iterator of {@code n} sequence elements, where each element is the given {@code element}.\n+     *\/\n+    static <T> Iterator<T> fill(int n, T element) {\n+        return io.vavr.collection.Collections.fillObject(n, element);\n+    }\n+\n     \/**\n      * Creates an Iterator of characters starting from {@code from}, extending to {@code toExclusive - 1}.\n      * <p>","input_nl":null,"output":"`where each element is the given {@code element}`","target":"An iterator **of {\\@code n} sequential elements,** where each element ~are~ **is the** given {\\@code element}.","labels":"documentation -> improve behavior description","first_category":"documentation"}
{"id":51867,"task":"C2NL","work":4,"category":"W","input_code":"@@ -26,6 +26,7 @@ public class AbstractMailer {\n   private boolean usesAuth;\n \n   private String mailHost;\n+  private String mailPort;\n   private String mailUser;\n   private String mailPassword;\n   private String mailSender;","input_nl":null,"output":"mailPort does not seem to be being used?","target":"Why not have mailPort as int since your are already parsing while calling t.connect ?","labels":"refactoring -> typing -> change variable\/constant type","first_category":"refactoring"}
{"id":70736,"task":"C2NL","work":4,"category":"C","input_code":"@@ -52,6 +52,10 @@ public class ViewSettings extends MainWindowView {\n     private static final String CAPTION_TITLE_CSS_CLASS = \"captionTitle\";\n     private static final String CONFIGURATION_PANE_CSS_CLASS = \"containerConfigurationPane\";\n     private static final String TITLE_CSS_CLASS = \"title\";\n+    private String applicationName;\n+    private String applicationVersion;\n+    private String applicationGitRevision;\n+    private String applicationBuildTimestamp;\n     private final ObservableList<String> repositories = FXCollections.observableArrayList();\n     private ComboBox<Theme> themes;\n     private Consumer<Settings> onSave;","input_nl":null,"output":"Shouldn't these be static final fields?","target":"These could be final","labels":"object design principles -> inheritance -> add final modifier","first_category":"object design principles"}
{"id":52112,"task":"C2NL","work":4,"category":"W","input_code":"@@ -87,7 +87,7 @@ public class ImagesManageActivity extends BaseActivity {\n     private static final int REQUEST_UNSELECT_IMAGE_AFTER_LOGIN = 4;\n     public static final int REQUEST_EDIT_IMAGE = 1000;\n     private static final int REQUEST_CHOOSE_IMAGE = 1001;\n-    private static final List<ProductImageField> TYPE_IMAGE = Arrays.asList(ProductImageField.FRONT, ProductImageField.INGREDIENTS, ProductImageField.NUTRITION);\n+    private static final List<ProductImageField> TYPE_IMAGE = Arrays.asList(ProductImageField.FRONT, ProductImageField.INGREDIENTS, ProductImageField.NUTRITION, ProductImageField.PACKAGING);\n     private ActivityFullScreenImageBinding binding;\n     private OpenFoodAPIClient client;\n     private File lastViewedImage;","input_nl":null,"output":"Is this related to this PR?","target":"I would rename the field to IMAGE_TYPES and make it an array. I don't think we need list operations. Also, if possible, I would move the field to the ApiFields class. What do you think?","labels":"refactoring -> typing -> change variable\/constant type\nrefactoring -> moving -> move variable\/constant\nrefactoring -> renaming -> rename variable\/constant","first_category":"refactoring;refactoring;refactoring"}
{"id":51504,"task":"C2NL","work":4,"category":"C","input_code":"@@ -387,7 +387,7 @@ public final class ORCSchemaUtil {\n         .map(Integer::parseInt);\n   }\n \n-  static int fieldId(TypeDescription orcType) {\n+  public static int fieldId(TypeDescription orcType) {\n     String idStr = orcType.getAttributeValue(ICEBERG_ID_ATTRIBUTE);\n     Preconditions.checkNotNull(idStr, \"Missing expected '%s' property\", ICEBERG_ID_ATTRIBUTE);\n     return Integer.parseInt(idStr);","input_nl":null,"output":"Why does this need to be public?","target":"Can we avoid making this public with the other updates?","labels":"object design principles -> encapsulation and scope -> change method visibility","first_category":"object design principles"}
{"id":51377,"task":"C2NL","work":4,"category":"C","input_code":"@@ -14,7 +14,7 @@ import net.sourceforge.pmd.RuleViolation;\n \/**\n  * A {@link RuleViolation} implementation that is immutable, and therefore cache friendly\n  *\/\n-public final class CachedRuleViolation implements RuleViolation {\n+public class CachedRuleViolation implements RuleViolation {\n \n     private final CachedRuleMapper mapper;","input_nl":null,"output":"Why did you remove `final`?","target":"if you are not dealing with cache now, please revert these changes. On their own they make little sense","labels":"other -> process -> revert code change","first_category":"other"}
{"id":51653,"task":"C2NL","work":4,"category":"W","input_code":"@@ -63,13 +63,13 @@ public class PackageListeners {\n   }\n \n   synchronized void packagesUpdated(List<PackageLoader.Package> pkgs) {\n-    MDCLoggingContext.setCore(core);\n+    if(core != null) MDCLoggingContext.setCore(core);\n     try {\n       for (PackageLoader.Package pkgInfo : pkgs) {\n         invokeListeners(pkgInfo);\n       }\n     } finally {\n-      MDCLoggingContext.clear();\n+      if(core != null) MDCLoggingContext.clear();\n     }\n   }","input_nl":null,"output":"if core is not null, MDCLoggingContext.setCore will throw an NPE","target":"Why do we need this check? setCore already handles nulls.","labels":"other -> process -> revert code change","first_category":"other"}
{"id":52627,"task":"C2NL","work":4,"category":"W","input_code":"@@ -62,9 +62,9 @@ public final class JUnit5RuleUsage extends BugChecker implements BugChecker.Clas\n     }\n \n     static Matcher<ClassTree> hasVariable(Matcher<VariableTree> matcher) {\n-        return (classTree, state) -> classTree.getMembers().stream()\n-                .filter(tree -> tree instanceof VariableTree)\n-                .anyMatch(tree -> matcher.matches((VariableTree) tree, state));\n+        return (classTree, state) ->\n+                classTree.getMembers().stream().filter(tree -> tree instanceof VariableTree).anyMatch(tree ->\n+                        matcher.matches((VariableTree) tree, state));\n     }\n \n     static Matcher<VariableTree> hasAnnotationOnVariable(String annotation) {","input_nl":null,"output":"I would rewrite it as ```java .filter(tree -> tree instanceof VariableTree).anyMatch(tree -> matcher.matches((VariableTree) tree, state));","target":"@dansanduleac what do you think of this one? dots were aligned and no longer are  ","labels":"refactoring -> readability -> improve formatting","first_category":"refactoring"}
{"id":70694,"task":"C2NL","work":4,"category":"C","input_code":"@@ -24,9 +24,7 @@ import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.Reader;\n import java.nio.charset.Charset;\n-import java.sql.Connection;\n-import java.sql.DatabaseMetaData;\n-import java.sql.SQLException;\n+import java.sql.*;\n import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.Calendar;","input_nl":null,"output":"No wildcard imports at all, please.","target":"Please do not use wildcard imports.","labels":"refactoring -> imports -> avoid wildcard imports","first_category":"refactoring"}
{"id":51254,"task":"C2NL","work":4,"category":"W","input_code":"@@ -169,6 +169,8 @@ public class PhpSampleMethodToViewTransformer implements SampleMethodToViewTrans\n     builder.isResourceMap(fieldInfo.type().isMap());\n     builder.pageVarName(\n         symbolTable.getNewSymbol(namer.localVarName(Name.lowerCamel(fieldInfo.name()))));\n+    builder.pageTokenName(methodInfo.requestPageTokenName());\n+    builder.nextPageTokenName(Name.lowerCamel(methodInfo.responsePageTokenName()).toUpperCamel());\n     return builder.build();\n   }\n }","input_nl":null,"output":"Do we really want to call `toUpperCamel` everywhere? Wouldn't it be better to do it once and store the result in a variable?","target":"How come we need case manipulation for the nextPageToken and not for pageToken?","labels":"bug-fixing -> fix wrong behavior -> add method call\nbug-fixing -> fix wrong behavior -> modify method call parameters","first_category":"bug-fixing;bug-fixing"}
{"id":52125,"task":"C2NL","work":4,"category":"W","input_code":"@@ -83,8 +83,9 @@ public class Session implements ContentBlocking.Delegate, GeckoSession.Navigatio\n     private transient SharedPreferences mPrefs;\n     private transient GeckoRuntime mRuntime;\n     private transient byte[] mPrivatePage;\n-    private transient boolean mFirstContentfulPaint;\n+    private transient boolean mFirstContentFulPaint;\n     private transient long mKeepAlive;\n+    private transient boolean mIsFirstActivation;\n \n     public interface BitmapChangedListener {\n         void onBitmapChanged(Session aSession, Bitmap aBitmap);","input_nl":null,"output":"Is there a reason for keeping `mFirstContentfulPaint`?","target":"nit: `Contentful` is the word used in the GV API, without the uppercase in F","labels":"refactoring -> renaming -> rename variable\/constant","first_category":"refactoring"}
{"id":51415,"task":"C2NL","work":4,"category":"W","input_code":"@@ -25,6 +25,11 @@ import io.swagger.converter.ModelConverters;\n import io.swagger.models.properties.Property;\n \n public class DefaultResponseTypeProcessor implements ResponseTypeProcessor {\n+  @Override\n+  public Class<?> getResponseType() {\n+    \/\/ not care for this.\n+    return null;\n+  }\n \n   @Override\n   public Property process(OperationGenerator operationGenerator) {","input_nl":null,"output":"Why return `null` instead of throwing exception?","target":"How about name it with NullResponseTypeProcessor","labels":"refactoring -> renaming -> rename class","first_category":"refactoring"}
{"id":52455,"task":"C2NL","work":4,"category":"W","input_code":"@@ -372,7 +372,9 @@ class SparkWrite {\n       }\n \n       Expression conflictDetectionFilter = conflictDetectionFilter();\n-      overwriteFiles.validateNoConflictingAppends(conflictDetectionFilter);\n+      overwriteFiles.conflictDetectionFilter(conflictDetectionFilter);\n+      overwriteFiles.validateNoConflictingData();\n+      overwriteFiles.validateNoConflictingDeletes();\n \n       String commitMsg = String.format(\n           \"overwrite of %d data files with %d new data files, scanSnapshotId: %d, conflictDetectionFilter: %s\",","input_nl":null,"output":"Could you please rename `conflictDetectionFilter` to `conflictDetectionExpression`?","target":"@aokolnychyi, shouldn't this check whether the operation is a delete? If this is invoked by `DELETE FROM` then we don't need to validate conflicting deletes.","labels":"bug-fixing -> improve code robustness\nrefactoring -> performance -> optimize performance","first_category":"bug-fixing;refactoring"}
{"id":51661,"task":"C2NL","work":4,"category":"W","input_code":"@@ -95,7 +95,7 @@ public class FreezeTimersOverlay extends Overlay\n \t{\n \t\tfinal Player player = playerDespawned.getPlayer();\n \t\t\/\/ All despawns ok: death, teleports, log out, runs away from screen\n-\t\tif (config.showPlayers() | config.showNpcs() | config.FreezeTimers() | config.Veng() | config.TB())\n+\t\tif (config.showPlayers() | config.showNpcs() | config.FreezeTimers() | config.Veng())\n \t\t{\n \t\t\tthis.remove(player);\n \t\t}","input_nl":null,"output":"Using config.TB() instead of config.Ven() would be more future-proof IMHO.","target":"showNPCs is not needed","labels":"refactoring -> readability -> simplify logic -> simplify if-else statement -> simplify if condition","first_category":"refactoring"}
{"id":51699,"task":"C2NL","work":4,"category":"W","input_code":"@@ -271,7 +271,7 @@ public class SparkTableUtil {\n    * @param metricsConfig a metrics conf\n    * @return a List of DataFile\n    *\/\n-  public static List<DataFile> listPartition(Map<String, String> partition, String uri, String format,\n+  public static List<DataFile> listPartition(Map<String, String> partition, URI uri, String format,\n                                              PartitionSpec spec, Configuration conf, MetricsConfig metricsConfig) {\n     if (format.contains(\"avro\")) {\n       return listAvroPartition(partition, uri, spec, conf);","input_nl":null,"output":"Seems like this change is not required ?","target":"I'd like to avoid changing this method since it is public and using a URI will probably change behavior for users passing strings (String -> URI -> Path instead of String -> Path).","labels":"bug-fixing -> fix wrong behavior -> modify method call parameters","first_category":"bug-fixing"}
{"id":51206,"task":"C2NL","work":4,"category":"W","input_code":"@@ -526,10 +526,10 @@ public final class JavaParserMetaModel {\n         unaryExprMetaModel.getDeclaredPropertyMetaModels().add(unaryExprMetaModel.expressionPropertyMetaModel);\n         unaryExprMetaModel.operatorPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"operator\", com.github.javaparser.ast.expr.UnaryExpr.Operator.class, Optional.empty(), false, false, false, false, false);\n         unaryExprMetaModel.getDeclaredPropertyMetaModels().add(unaryExprMetaModel.operatorPropertyMetaModel);\n-        unaryExprMetaModel.prefixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"prefix\", boolean.class, Optional.empty(), false, true, false, false, false);\n-        unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.prefixPropertyMetaModel);\n         unaryExprMetaModel.postfixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"postfix\", boolean.class, Optional.empty(), false, true, false, false, false);\n         unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.postfixPropertyMetaModel);\n+        unaryExprMetaModel.prefixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"prefix\", boolean.class, Optional.empty(), false, true, false, false, false);\n+        unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.prefixPropertyMetaModel);\n         variableDeclarationExprMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, \"annotations\", com.github.javaparser.ast.expr.AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);\n         variableDeclarationExprMetaModel.getDeclaredPropertyMetaModels().add(variableDeclarationExprMetaModel.annotationsPropertyMetaModel);\n         variableDeclarationExprMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, \"modifiers\", com.github.javaparser.ast.Modifier.class, Optional.empty(), false, false, false, true, false);","input_nl":null,"output":"What's the reason for this change?","target":"Maybe I should do some sorting so that these properties don't keep moving around...","labels":"refactoring -> readability -> improve order of statements","first_category":"refactoring"}
{"id":51597,"task":"C2NL","work":4,"category":"W","input_code":"@@ -120,7 +120,7 @@ public interface GenericToken<T extends GenericToken<T>> {\n                     + \") must come before \" + to + \" (at \" + to.getStartInDocument() + \")\"\n             );\n         }\n-        return IteratorUtil.generate(from, t -> t == to ? null : t.getNext());\n+        return IteratorUtil.generate(from, t -> t.equals(to) ? null : t.getNext());\n     }","input_nl":null,"output":"`t == to` is equivalent to `t.equals(to)`.","target":"I think this is should absolutely be `==`, as the interface cannot control the implementation of equals (and it's part of the contract of the enclosing function). Can we add this interface to the exceptions of the rule?","labels":"refactoring -> readability -> replace method with operator","first_category":"refactoring"}
{"id":52084,"task":"C2NL","work":4,"category":"W","input_code":"@@ -460,11 +460,6 @@ public final class Util {\n           continue;\n         }\n \n-        if (results.size() == topN-1 && maxQueueDepth == topN) {\n-          \/\/ Last path -- don't bother w\/ queue anymore:\n-          queue = null;\n-        }\n-\n         \/\/ We take path and find its \"0 output completion\",\n         \/\/ ie, just keep traversing the first arc with\n         \/\/ NO_OUTPUT that we can find, since this must lead","input_nl":null,"output":"@Scottmitch why is this removed?","target":"Whoa, was this opto breaking something? I guess if this final path is filtered out, we still need the queue? Have you run the suggest benchmarks to see if removing this opto hurt performance?","labels":"refactoring -> performance -> optimize performance","first_category":"refactoring"}
{"id":52263,"task":"C2NL","work":4,"category":"W","input_code":"@@ -48,8 +48,9 @@ public interface FileAppender<D> extends Closeable {\n   long length();\n \n   \/**\n-   * @return a list of offsets for file blocks if applicable, null otherwise. When available, this\n+   * @return a list of offsets for file blocks, if applicable, null otherwise. When available, this\n    * information is used for planning scan tasks whose boundaries are determined by these offsets.\n+   * It is important that the returned list is sorted in ascending order.\n    * Only valid after the file is closed.\n    *\/\n   default List<Long> splitOffsets() {","input_nl":null,"output":"`The returned list is sorted in ascending order.`","target":"I missed this earlier, but why does this say \"file blocks\"? This should probably be \"recommended split locations\".","labels":"documentation -> improve behavior description","first_category":"documentation"}
{"id":52634,"task":"C2NL","work":4,"category":"W","input_code":"@@ -38,8 +38,9 @@ public class SampleNamer extends NameFormatterDelegator {\n   \/**\n    * Returns the variable name of the service.\n    *\/\n-  public String getServiceVarName(String apiTypeName) {\n-    return localVarName(Name.lowerCamel(Name.upperCamel(apiTypeName).toLowerCamel(), \"service\"));\n+  public String getServiceVarName(String lowerCamelApiTypeName) {\n+    return localVarName(\n+        Name.lowerCamel(Name.lowerCamel(lowerCamelApiTypeName).toLowerCamel(), \"service\"));\n   }\n \n   \/**","input_nl":null,"output":"why not `apiTypeName`?","target":"There is a simpler way to do this: 1. Don't bother with the whole lowerCamelApiTypeName in SampleConfig 2. Use this code: `return localVarName(Name.upperCamel(apiTypeName, \"Service\"));` Basically, each of the static creation methods of Name just need to have their arguments all be in the same casing, so you would just pass the upper camel string \"Service\" here.","labels":"refactoring -> readability -> simplify logic","first_category":"refactoring"}
{"id":51626,"task":"C2NL","work":4,"category":"W","input_code":"@@ -349,7 +349,9 @@ public class EventFiringWebDriver implements WebDriver, JavascriptExecutor, Take\n     }\n \n     public void submit() {\n+      dispatcher.beforeClickOn(element, driver);\n       element.submit();\n+      dispatcher.afterClickOn(element, driver);\n     }\n \n     public void sendKeys(CharSequence... keysToSend) {","input_nl":null,"output":"Shouldn't `element.submit()` be called before `dispatcher.beforeClickOn(element, driver);`?","target":"this shouldn't be beforeClickOn, but rather beforeSubmit? and added to WebDriverEventListener. Since submit does not synthesize the 'click' events, this isn't accurate.","labels":"bug-fixing -> fix wrong behavior -> replace method call","first_category":"bug-fixing"}
{"id":52369,"task":"C2NL","work":4,"category":"W","input_code":"@@ -71,8 +71,9 @@ public interface GenesisConfigOptions {\n \n   OptionalLong getLondonBlockNumber();\n \n-  \/\/ TODO EIP-1559 change for the actual fork name when known\n-  OptionalLong getAleutBlockNumber();\n+  OptionalLong getArrowGlacierBlockNumber();\n+\n+  OptionalLong getBaseFeePerGas();\n \n   OptionalLong getEIP1559BlockNumber();","input_nl":null,"output":"`getBaseFeePerGas()` -> `getArbitraryFeePerGas()`","target":"Can all the BaseFeePerGas methods that are added be removed? It's not needed for the bomb and not referenced anywhere else in this PR.","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded method","first_category":"refactoring"}
{"id":52735,"task":"C2NL","work":4,"category":"W","input_code":"@@ -24,8 +24,7 @@ import java.io.OutputStream;\n import java.util.Base64;\n \n \/**\n- * Defines the output type for a screenshot. See org.openqa.selenium.Screenshot for usage and\n- * examples.\n+ * Defines the output type for a screenshot.\n  *\n  * @see TakesScreenshot\n  * @param <T> Type for the screenshot output.","input_nl":null,"output":"Did you mean to leave this in?","target":"instead of removing can you reference org.openqa.selenium.TakesScreenshot ?","labels":"documentation -> improve behavior description","first_category":"documentation"}
{"id":52249,"task":"C2NL","work":4,"category":"W","input_code":"@@ -32,6 +32,7 @@ public class TestOAuth2AuthorizationRequests {\n \t\treturn OAuth2AuthorizationRequest.authorizationCode()\n \t\t\t\t.authorizationUri(\"https:\/\/example.com\/login\/oauth\/authorize\")\n \t\t\t\t.clientId(clientId)\n+\t\t\t\t.scope(\"openid\")\n \t\t\t\t.redirectUri(\"https:\/\/example.com\/authorize\/oauth2\/code\/registration-id\")\n \t\t\t\t.state(\"state\")\n \t\t\t\t.additionalParameters(additionalParameters);","input_nl":null,"output":"this test is missing the `.scope(\"openid\")` parameter","target":"Did you verify this isn't going to break any existing test assumptions? We probably shouldn't modify this as we don't know what impact this is having on existing tests. It may invalidate a test that has different expectations of the scopes.","labels":"other -> process -> revert code change","first_category":"other"}
{"id":51421,"task":"C2NL","work":4,"category":"W","input_code":"@@ -23,6 +23,9 @@ public abstract class GrpcStreamingDetailView {\n \n   public abstract String methodName();\n \n+  @Nullable\n+  public abstract String upperCamelMethodName();\n+\n   public abstract GrpcStreamingType grpcStreamingType();\n \n   @Nullable","input_nl":null,"output":"nit: `upperCamelMethodName` -> `camelMethodName`","target":"I think we should name this `grpcMethodName` or similar. That is what this refers to, right? The fact that it is upper camel is an implementation.","labels":"refactoring -> renaming -> rename method","first_category":"refactoring"}
{"id":51278,"task":"C2NL","work":4,"category":"W","input_code":"@@ -88,6 +88,13 @@ public interface Table {\n    *\/\n   Map<Integer, SortOrder> sortOrders();\n \n+  \/**\n+   * Return the {@link RowKey row key} for this table.\n+   *\n+   * @return this table's row key.\n+   *\/\n+  RowKey rowKey();\n+\n   \/**\n    * Return a map of string properties for this table.\n    *","input_nl":null,"output":"rowKey -> RowKey","target":"Nit: this table's row key map -> this table's row keys map","labels":"documentation -> improve behavior description","first_category":"documentation"}
{"id":51461,"task":"C2NL","work":4,"category":"C","input_code":"@@ -123,7 +123,7 @@ public class RestrictedDefaultPrivacyController implements PrivacyController {\n       final String privacyUserId,\n       final Optional<PrivacyGroup> maybePrivacyGroup) {\n     try {\n-      LOG.trace(\"Storing private transaction in enclave\");\n+      LOG.info(\"Storing private transaction in enclave\");\n       final SendResponse sendResponse =\n           sendRequest(privateTransaction, privacyUserId, maybePrivacyGroup);\n       return sendResponse.getKey();","input_nl":null,"output":"I don't think this should be info level. It's important for the client to know the status of the operation.","target":"Are you going to change that back?","labels":"logging -> change log level\nother -> process -> revert code change","first_category":"logging;other"}
{"id":51395,"task":"C2NL","work":4,"category":"W","input_code":"@@ -283,8 +283,9 @@ public class UiSetupWizardImplementation implements SetupWizard {\n      *\/\n     @Override\n     public String browse(String textToShow, String directory, List<String> allowedExtensions) {\n+        final List<String> copiedAllowedExtensions = allowedExtensions != null ? List.copyOf(allowedExtensions) : null;\n         return messageSender.runAndWait(\n-                message -> setupUi.showBrowseStep(message, textToShow, new File(directory), allowedExtensions));\n+                message -> setupUi.showBrowseStep(message, textToShow, new File(directory), copiedAllowedExtensions));\n     }\n \n     \/**","input_nl":null,"output":"Avoid deeply nested control flow statements.","target":"Are you sure it should be null and not an empty List?","labels":"bug-fixing -> fix wrong behavior -> modify wrong variable initialization","first_category":"bug-fixing"}
{"id":51515,"task":"C2NL","work":4,"category":"C","input_code":"@@ -12,10 +12,7 @@\n  *\/\n package org.camunda.bpm.application;\n \n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.ServiceLoader;\n+import java.util.*;\n import java.util.concurrent.Callable;\n \n import javax.script.ScriptEngine;","input_nl":null,"output":"No wildcard imports at all, please.","target":"please inline imports","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded import","first_category":"refactoring"}
{"id":51435,"task":"C2NL","work":4,"category":"W","input_code":"@@ -14,10 +14,15 @@\n  *\/\n package com.google.api.codegen.transformer.nodejs;\n \n+import com.google.api.codegen.config.MethodConfig;\n import com.google.api.codegen.transformer.ApiMethodParamTransformer;\n import com.google.api.codegen.transformer.MethodTransformerContext;\n+import com.google.api.codegen.transformer.SurfaceNamer;\n+import com.google.api.codegen.util.Name;\n import com.google.api.codegen.viewmodel.DynamicLangDefaultableParamView;\n import com.google.api.codegen.viewmodel.ParamDocView;\n+import com.google.api.codegen.viewmodel.SimpleParamDocView;\n+import com.google.api.tools.framework.model.Field;\n import com.google.common.collect.ImmutableList;\n import java.util.List;","input_nl":null,"output":"nit: update copyright year in header","target":"can use `getParamTypeName` instead","labels":"refactoring -> imports -> replace imported class","first_category":"refactoring"}
{"id":52095,"task":"C2NL","work":4,"category":"W","input_code":"@@ -94,6 +94,10 @@ public class TiTableInfo implements Serializable {\n     primaryKeyColumn = primaryKey;\n   }\n \n+  public boolean isNotView() {\n+    return this.viewInfo == null;\n+  }\n+\n   public boolean isView() {\n     return this.viewInfo != null;\n   }","input_nl":null,"output":"Why not use `isNull`?","target":"better use `!isView()` so that we don't need to modify multiple lines in future.","labels":"other -> reuse existing code","first_category":"other"}
{"id":52461,"task":"C2NL","work":4,"category":"W","input_code":"@@ -42,6 +42,8 @@ public abstract class MessageBuilder {\n     private final Context context;\n     private final MessageIdGenerator messageIdGenerator;\n     private final BoundaryGenerator boundaryGenerator;\n+    private static final String highPriorityTag = \"X-Priority\";\n+    private static final String xPriorityContent =\"priority_high\";\n \n \n     private String subject;","input_nl":null,"output":"missing space after `=`","target":"this is duplicate now. I suggest moving it into `MimeHeader`, we already have a bunch of other headers there","labels":"refactoring -> moving -> move variable\/constant","first_category":"refactoring"}
{"id":51564,"task":"C2NL","work":4,"category":"W","input_code":"@@ -689,8 +689,9 @@ public class ExecutionController extends EventHandler implements ExecutorManager\n             this.maxConcurrentRunsPerFlowMap);\n         if (running.size() > maxConcurrentRuns) {\n           this.commonMetrics.markSubmitFlowSkip();\n-          throw new ExecutorManagerException(\"Flow \" + flowId\n-              + \" has more than \" + maxConcurrentRuns + \" concurrent runs. Skipping\",\n+          throw new ExecutorManagerException(\"Flow with id \" +\n+              (exflow.getFlowDefinitionId() > 0 ? exflow.getFlowDefinitionId() : flowId)\n+              + \" has more than \" + maxConcurrentRuns + \" concurrent runs. Execution not created.\",\n               ExecutorManagerException.Reason.SkippedExecution);\n         } else if (options.getConcurrentOption().equals(\n             ExecutionOptions.CONCURRENT_OPTION_PIPELINE)) {","input_nl":null,"output":"\"execution not created\" -> \"Flow not created\"?","target":"Is the `flowDefinitionId` sufficient to uniquely identify the flow or does it need to be the tuple `<flowId,flowDefinitionId>` ?","labels":"other -> improve usability -> improve error message","first_category":"other"}
{"id":52228,"task":"C2NL","work":4,"category":"W","input_code":"@@ -9,6 +9,12 @@ import static com.github.javaparser.JavaParser.*;\n import static com.github.javaparser.utils.Utils.EOL;\n import static org.junit.Assert.*;\n \n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.Writer;\n+import java.io.BufferedWriter;\n+\n public class JsonPrinterTest {\n     @Test\n     public void testWithType() {","input_nl":null,"output":"No wildcard imports, please.","target":"I was using this imports for writing the results to file to more easily check that it was valid JSON. You can probably remove these `java.io` imports.","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded import","first_category":"refactoring"}
{"id":52617,"task":"C2NL","work":4,"category":"W","input_code":"@@ -90,6 +90,9 @@ public final class HttpUtils {\n    * @return the encoded path param\n    *\/\n   public static String encodePathParam(String pathParam) {\n+    if (pathParam.indexOf(';') != -1) {\n+      pathParam = pathParam.substring(0, pathParam.indexOf(';'));\n+    }\n     return UrlEscapers.urlPathSegmentEscaper().escape(pathParam);\n   }","input_nl":null,"output":"Should this be `StringUtils.isNotBlank()`?","target":"This modification is not correct. Suggections: 1. upgread guava to 30.0-jre will fix this issue","labels":"bug-fixing -> fix wrong behavior","first_category":"bug-fixing"}
{"id":51710,"task":"C2NL","work":4,"category":"W","input_code":"@@ -140,4 +140,10 @@ public class TableProperties {\n \n   public static final String GC_ENABLED = \"gc.enabled\";\n   public static final boolean GC_ENABLED_DEFAULT = true;\n+\n+  public static final String MAX_SNAPSHOT_AGE_MS = \"history.expire.max-snapshot-age-ms\";\n+  public static final long MAX_SNAPSHOT_AGE_MS_DEFAULT = 5 * 24 * 60 * 60 * 1000; \/\/ 5 days\n+\n+  public static final String RETAIN_MIN_NUM_SNAPSHOTS = \"history.expire.retain-min-num-snapshots\";\n+  public static final int RETAIN_MIN_NUM_SNAPSHOTS_DEFAULT = 1;\n }","input_nl":null,"output":"`public static final String MAX_SNAPSHOT_AGE_MS = \"history.expire.max-snapshot-age-ms\";` ?","target":"This is not a particularly good default but we need it to keep the old behavior.","labels":"bug-fixing -> ensure backward compatibility","first_category":"bug-fixing"}
{"id":51514,"task":"C2NL","work":4,"category":"W","input_code":"@@ -27,6 +27,7 @@ public class ManifestFileBean implements ManifestFile {\n   private String path = null;\n   private Long length = null;\n   private Integer partitionSpecId = null;\n+  private Integer content = null;\n   private Long addedSnapshotId = null;\n \n   public String getPath() {","input_nl":null,"output":"Should this be an `int` instead of `Integer`?","target":"why not just use `ManifestContent` instead of `Integer`?","labels":"refactoring -> typing -> change variable\/constant type","first_category":"refactoring"}
{"id":51879,"task":"C2NL","work":4,"category":"W","input_code":"@@ -35,9 +35,14 @@ public class EthashConfigOptions {\n     return JsonUtil.getLong(ethashConfigRoot, \"fixeddifficulty\");\n   }\n \n+  public OptionalLong getEpochLengthActivationBlock() {\n+    return JsonUtil.getLong(ethashConfigRoot, \"epochlengthactivation\");\n+  }\n+\n   Map<String, Object> asMap() {\n     final ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();\n     getFixedDifficulty().ifPresent(l -> builder.put(\"fixeddifficulty\", l));\n+    getEpochLengthActivationBlock().ifPresent(a -> builder.put(\"epochlengthactivation\", a));\n     return builder.build();\n   }\n }","input_nl":null,"output":"Nitpick: `a -> builder.put(\"epochlengthactivation\", a)` would be more readable.","target":"How about putting `epochLength` (or something like that) in place of `a` just to make it easier to read","labels":"refactoring -> renaming -> rename parameter","first_category":"refactoring"}
{"id":52272,"task":"C2NL","work":4,"category":"W","input_code":"@@ -5,7 +5,13 @@\n package net.sourceforge.pmd.lang.vf;\n \n import net.sourceforge.pmd.AbstractRuleSetFactoryTest;\n+import net.sourceforge.pmd.lang.apex.rule.ApexXPathRule;\n \n public class RuleSetFactoryTest extends AbstractRuleSetFactoryTest {\n-    \/\/ no additional tests\n+    public RuleSetFactoryTest() {\n+        super();\n+        \/\/ Copied from net.sourceforge.pmd.lang.apex.RuleSetFactoryTest\n+        \/\/ Apex rules are found in the classpath because this module has a dependency on pmd-apex\n+        validXPathClassNames.add(ApexXPathRule.class.getName());\n+    }\n }","input_nl":null,"output":"Why not just add the class to the list of validXPathClassNames?","target":"I think, we should fix\/improve AbstractRuleSetFactoryTest. I guess, both apex and visualforce rules are now tested, which is unnecessary.","labels":"testing -> fix test logic\/assert statement","first_category":"testing"}
{"id":51721,"task":"C2NL","work":4,"category":"W","input_code":"@@ -72,6 +72,7 @@ public class Spark3BinPackStrategy extends BinPackStrategy {\n           .format(\"iceberg\")\n           .option(SparkWriteOptions.REWRITTEN_FILE_SCAN_TASK_SET_ID, groupID)\n           .option(SparkWriteOptions.TARGET_FILE_SIZE_BYTES, writeMaxFileSize())\n+          .option(SparkWriteOptions.DISTRIBUTION_MODE, \"none\")\n           .mode(\"append\")\n           .save(table.name());","input_nl":null,"output":"should this be set to none by default?","target":"Still request a local sort for bin-packing based on the defined table sort order.","labels":"bug-fixing -> fix wrong behavior -> add method call","first_category":"bug-fixing"}
{"id":52245,"task":"C2NL","work":4,"category":"W","input_code":"@@ -542,7 +542,7 @@ public class AutoScalingHandler extends RequestHandlerBase implements Permission\n     String eventTypeStr = op.getStr(EVENT);\n \n     if (op.hasError()) return currentConfig;\n-    TriggerEventType eventType = TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n+    TriggerEventType.valueOf(eventTypeStr.trim().toUpperCase(Locale.ROOT));\n \n     String waitForStr = op.getStr(WAIT_FOR, null);","input_nl":null,"output":"Why do you need this? eventTypeStr.trim().toUpperCase(Locale.ROOT);","target":"I think you can remove the whole line.","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded statement","first_category":"refactoring"}
{"id":51380,"task":"C2NL","work":4,"category":"W","input_code":"@@ -329,8 +329,14 @@ public class ConfigCenterClient {\n \n     public void refreshConfig(String configcenter, boolean wait) {\n       CountDownLatch latch = new CountDownLatch(1);\n+      String encodeServiceName = \"\";\n+      try {\n+        encodeServiceName = URLEncoder.encode(StringUtils.deleteWhitespace(serviceName), \"UTF-8\");\n+      } catch (UnsupportedEncodingException e) {\n+        LOGGER.error(\"encode error: {}\",e.getMessage());\n+      }\n+      String path = URIConst.ITEMS + \"?dimensionsInfo=\" + encodeServiceName;\n       clientMgr.findThreadBindClientPool().runOnContext(client -> {\n-        String path = URIConst.ITEMS + \"?dimensionsInfo=\" + StringUtils.deleteWhitespace(serviceName);\n         IpPort ipPort = NetUtils.parseIpPortFromURI(configcenter);\n         HttpClientRequest request = client.get(ipPort.getPort(), ipPort.getHostOrIp(), path, rsp -> {\n           if (rsp.statusCode() == HttpResponseStatus.OK.code()) {","input_nl":null,"output":"Wouldn't it be better to use Charset.defaultCharset() ?","target":"1.not format code 2.failed but still continue? 3.\"UTF-8\" can changed to java.nio.charset.StandardCharsets.UTF_8.name()","labels":"refactoring -> readability -> improve formatting\nrefactoring -> readability -> replace string literals with variable\/constant\/method call","first_category":"refactoring;refactoring"}
{"id":70757,"task":"C2NL","work":4,"category":"C","input_code":"@@ -0,0 +1,16 @@\n+package net.runelite.api.events.player.headicon;\n+\n+import lombok.Getter;\n+import net.runelite.api.Player;\n+import net.runelite.api.events.Event;\n+\n+public abstract class PlayerHeadIconChanged implements Event\n+{\n+\t@Getter\n+\tprivate final Player player;\n+\n+\tpublic PlayerHeadIconChanged(Player player)\n+\t{\n+\t\tthis.player = player;\n+\t}\n+}","input_nl":null,"output":"This class is not used anywhere","target":"delete this class","labels":"refactoring -> readability -> remove unneeded code -> remove deprecated\/dead code","first_category":"refactoring"}
{"id":52568,"task":"C2NL","work":4,"category":"W","input_code":"@@ -103,7 +103,7 @@ public abstract class AbstractRestInvocation {\n     @SuppressWarnings(\"unchecked\")\n     Map<String, String> cseContext =\n         JsonUtils.readValue(strCseContext.getBytes(StandardCharsets.UTF_8), Map.class);\n-    invocation.setContext(cseContext);\n+    invocation.addContext(cseContext);\n   }\n \n   public String getContext(String key) {","input_nl":null,"output":"why this change ? invocation should already have a context ?","target":"highway have the same problem we can add a new method in invocation: mergeContext 1.if new context have more items, then addAll to new context, and replace old context 2.if new context have less items, then allAll to old context directly.","labels":"refactoring -> recommend alternative implementation","first_category":"refactoring"}
{"id":52473,"task":"C2NL","work":4,"category":"W","input_code":"@@ -86,7 +86,8 @@ var rubyMappings = {\n   'http_infrastructure':['..\/..\/..\/TestServer\/swagger\/httpInfrastructure.json','HttpInfrastructureModule'],\n   'required_optional':['..\/..\/..\/TestServer\/swagger\/required-optional.json','RequiredOptionalModule'],\n   'report':['..\/..\/..\/TestServer\/swagger\/report.json','ReportModule'],\n-  'model_flattening':['..\/..\/..\/TestServer\/swagger\/model-flattening.json', 'ModelFlatteningModule'],\n+  'model_flattening':['..\/..\/..\/TestServer\/swagger\/model-flattening.json', 'ModelFlatteningModule'],  \n+  'parameter_grouping':['..\/..\/..\/TestServer\/swagger\/azure-parameter-grouping.json', 'ParameterGroupingModule'],\n };\n \n var defaultAzureMappings = {","input_nl":null,"output":"let's also rename the `azure-parameter-grouping` to `parameter-grouping`","target":"do we need to add this one in this PR?","labels":"other -> process -> changes to a file should not belong to a pr","first_category":"other"}
{"id":51152,"task":"C2NL","work":4,"category":"W","input_code":"@@ -182,6 +182,7 @@ public class FetchActiveFlowDao {\n             + \" LEFT JOIN \"\n             + \" executors et ON ex.executor_id = et.id\"\n             + \" WHERE ex.status NOT IN (\"\n+            + Status.EXECUTION_STOPPED.getNumVal() + \", \"\n             + Status.SUCCEEDED.getNumVal() + \", \"\n             + Status.KILLED.getNumVal() + \", \"\n             + Status.FAILED.getNumVal() + \")\";","input_nl":null,"output":"Shouldn't this be `Status.EXECUTION_FAILED.getNumVal()`?","target":"This method can cause bugs. Why don't you use list of finalize statuses and then use join by comma and that will give you correct value. Use Apache Commons Lang library List<Integer> list = Arrays.asList(1,2,3,4,5,6,7); String str = org.apache.commons.lang.StringUtils.join(list, \",\"); You can use it at multiple places shown in this diff.","labels":"bug-fixing -> fix wrong behavior\nrefactoring -> recommend alternative implementation","first_category":"bug-fixing;refactoring"}
