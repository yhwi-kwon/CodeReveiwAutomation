{"id":51152,"task":"C2NL","work":4,"category":"W","input_code":"@@ -182,6 +182,7 @@ public class FetchActiveFlowDao {\n             + \" LEFT JOIN \"\n             + \" executors et ON ex.executor_id = et.id\"\n             + \" WHERE ex.status NOT IN (\"\n+            + Status.EXECUTION_STOPPED.getNumVal() + \", \"\n             + Status.SUCCEEDED.getNumVal() + \", \"\n             + Status.KILLED.getNumVal() + \", \"\n             + Status.FAILED.getNumVal() + \")\";","input_nl":null,"output":"Shouldn't this be `Status.EXECUTION_FAILED.getNumVal()`?","target":"This method can cause bugs. Why don't you use list of finalize statuses and then use join by comma and that will give you correct value. Use Apache Commons Lang library List<Integer> list = Arrays.asList(1,2,3,4,5,6,7); String str = org.apache.commons.lang.StringUtils.join(list, \",\"); You can use it at multiple places shown in this diff.","labels":"bug-fixing -> fix wrong behavior\nrefactoring -> recommend alternative implementation","first_category":"bug-fixing;refactoring"}
{"id":51167,"task":"C2NL","work":4,"category":"W","input_code":"@@ -969,8 +969,11 @@ public class VRBrowserActivity extends PlatformActivity implements WidgetManager\n         GleanMetricsService.stopImmersive();\n         Handler handler = new Handler(Looper.getMainLooper());\n         handler.postDelayed(() -> {\n-            mWindows.resumeCompositor();\n-            Log.d(LOGTAG, \"Compositor Resumed\");\n+            if (!mWindows.isPaused()) {\n+                Log.d(LOGTAG, \"Compositor resume begin\");\n+                mWindows.resumeCompositor();\n+                Log.d(LOGTAG, \"Compositor resume end\");\n+            }\n         }, 20);\n     }","input_nl":null,"output":"Shouldn't this be `!mWindows.isPaused()`?","target":"These logs should probably use the `LOGTAG`","labels":"logging -> improve log message","first_category":"logging"}
{"id":51192,"task":"C2NL","work":4,"category":"W","input_code":"@@ -57,6 +57,7 @@ public class TiConfiguration implements Serializable {\n   private static final int DEF_KV_CLIENT_CONCURRENCY = 10;\n   private static final List<TiStoreType> DEF_ISOLATION_READ_ENGINES =\n       ImmutableList.of(TiStoreType.TiKV, TiStoreType.TiFlash);\n+  private static final int DEF_PREWRITE_CONCURRENCY = 20;\n \n   private int timeout = DEF_TIMEOUT;\n   private TimeUnit timeoutUnit = DEF_TIMEOUT_UNIT;","input_nl":null,"output":"Can we make this configurable?","target":"delete this line","labels":"refactoring -> readability -> remove unneeded code -> remove unneeded statement","first_category":"refactoring"}
{"id":51198,"task":"C2NL","work":4,"category":"C","input_code":"@@ -31,12 +31,7 @@ import org.openqa.selenium.grid.sessionmap.SessionMap;\n import org.openqa.selenium.grid.sessionmap.local.LocalSessionMap;\n import org.openqa.selenium.netty.server.NettyServer;\n import org.openqa.selenium.remote.SessionId;\n-import org.openqa.selenium.remote.http.HttpClient;\n-import org.openqa.selenium.remote.http.HttpHandler;\n-import org.openqa.selenium.remote.http.HttpRequest;\n-import org.openqa.selenium.remote.http.HttpResponse;\n-import org.openqa.selenium.remote.http.TextMessage;\n-import org.openqa.selenium.remote.http.WebSocket;\n+import org.openqa.selenium.remote.http.*;\n import org.openqa.selenium.remote.tracing.DefaultTestTracer;\n import org.openqa.selenium.remote.tracing.Tracer;","input_nl":null,"output":"No wildcard imports, please.","target":"Could you please leave the explicit imports?","labels":"refactoring -> imports -> avoid wildcard imports","first_category":"refactoring"}
{"id":51201,"task":"C2NL","work":4,"category":"W","input_code":"@@ -129,7 +129,7 @@ public class ApplicationsSidebar extends Sidebar {\n         this.testingCheck = new SidebarCheckBox(tr(\"Testing\"));\n         this.testingCheck.selectedProperty().bindBidirectional(filter.containTestingApplicationsProperty());\n \n-        this.requiresPatchCheck = new SidebarCheckBox(tr(\"Requires patch\"));\n+        this.requiresPatchCheck = new SidebarCheckBox(tr(\"Patch Required\"));\n         this.requiresPatchCheck.selectedProperty().bindBidirectional(filter.containRequiresPatchApplicationsProperty());\n \n         this.commercialCheck = new SidebarCheckBox(tr(\"Commercial\"));","input_nl":null,"output":"\"Patch Required\" -> \"Requires patch\" ?","target":"Why upper case \"R\"?","labels":"refactoring -> readability -> improve string literals","first_category":"refactoring"}
{"id":51206,"task":"C2NL","work":4,"category":"W","input_code":"@@ -526,10 +526,10 @@ public final class JavaParserMetaModel {\n         unaryExprMetaModel.getDeclaredPropertyMetaModels().add(unaryExprMetaModel.expressionPropertyMetaModel);\n         unaryExprMetaModel.operatorPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"operator\", com.github.javaparser.ast.expr.UnaryExpr.Operator.class, Optional.empty(), false, false, false, false, false);\n         unaryExprMetaModel.getDeclaredPropertyMetaModels().add(unaryExprMetaModel.operatorPropertyMetaModel);\n-        unaryExprMetaModel.prefixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"prefix\", boolean.class, Optional.empty(), false, true, false, false, false);\n-        unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.prefixPropertyMetaModel);\n         unaryExprMetaModel.postfixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"postfix\", boolean.class, Optional.empty(), false, true, false, false, false);\n         unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.postfixPropertyMetaModel);\n+        unaryExprMetaModel.prefixPropertyMetaModel = new PropertyMetaModel(unaryExprMetaModel, \"prefix\", boolean.class, Optional.empty(), false, true, false, false, false);\n+        unaryExprMetaModel.getDerivedPropertyMetaModels().add(unaryExprMetaModel.prefixPropertyMetaModel);\n         variableDeclarationExprMetaModel.annotationsPropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, \"annotations\", com.github.javaparser.ast.expr.AnnotationExpr.class, Optional.of(annotationExprMetaModel), false, false, true, false, false);\n         variableDeclarationExprMetaModel.getDeclaredPropertyMetaModels().add(variableDeclarationExprMetaModel.annotationsPropertyMetaModel);\n         variableDeclarationExprMetaModel.modifiersPropertyMetaModel = new PropertyMetaModel(variableDeclarationExprMetaModel, \"modifiers\", com.github.javaparser.ast.Modifier.class, Optional.empty(), false, false, false, true, false);","input_nl":null,"output":"What's the reason for this change?","target":"Maybe I should do some sorting so that these properties don't keep moving around...","labels":"refactoring -> readability -> improve order of statements","first_category":"refactoring"}
{"id":51212,"task":"C2NL","work":4,"category":"W","input_code":"@@ -127,4 +127,8 @@ public interface CollectionAdminParams {\n \n   \/** Option to follow aliases when deciding the target of a collection admin command. *\/\n   String FOLLOW_ALIASES = \"followAliases\";\n+\n+  \/** Prefix for automatically created config elements. *\/\n+  String AUTO_PREFIX = \".auto_\";\n+\n }","input_nl":null,"output":"This doesn't appear to be used anywhere.","target":"We use a suffix \".AUTOCREATED\" for configsets, maybe we can use the same here?","labels":"other -> code style -> ensure adherence to code base","first_category":"other"}
{"id":51213,"task":"C2NL","work":4,"category":"W","input_code":"@@ -38,7 +38,9 @@ public class NoUnusedPinCheckTask extends DefaultTask {\n \n     @Input\n     public final Set<String> getResolvedArtifacts() {\n-        return BaselineVersions.getResolvedArtifacts(getProject());\n+        return getProject().getAllprojects().stream()\n+                .flatMap(project -> BaselineVersions.getResolvedArtifacts(project).stream())\n+                .collect(Collectors.toSet());\n     }\n \n     @InputFile","input_nl":null,"output":"I think it's better to use `getProject().getAllprojects()` instead of `getProject().getAllprojects()`","target":"I am pretty sure that this is infinite recursion as getAllProjects returns the project itself.","labels":"bug-fixing -> fix wrong behavior\nbug-fixing -> fix wrong behavior -> modify return statement","first_category":"bug-fixing;bug-fixing"}
{"id":51214,"task":"C2NL","work":4,"category":"W","input_code":"@@ -21,6 +21,8 @@ namespace AutoRest.Go.TemplateModels\n         \/\/ (null or empty if the model is not paged).\n         public string NextLink;\n \n+        public bool PreparerNeeded;\n+\n         public ModelTemplateModel(CompositeType source)\n         {\n             this.LoadFrom(source);","input_nl":null,"output":"This should be a `public` field, not a `public` field.","target":"Should we default to `true` ?","labels":"bug-fixing -> fix wrong behavior -> modify wrong variable initialization","first_category":"bug-fixing"}
{"id":51240,"task":"C2NL","work":4,"category":"W","input_code":"@@ -296,9 +296,17 @@ public class NavListAdapter extends BaseAdapter\n                 .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n \n         convertView = inflater.inflate(R.layout.nav_section_item, parent, false);\n+        TextView feedsFilteredMsg = convertView.findViewById(R.id.nav_feeds_filtered_message);\n \n-        convertView.setEnabled(false);\n-        convertView.setOnClickListener(null);\n+        if (UserPreferences.getFeedFilter() != UserPreferences.FEED_FILTER_NONE) {\n+            convertView.setEnabled(true);\n+            feedsFilteredMsg.setText(\"{md-info-outline} \" + context.getString(R.string.feed_is_filtered));\n+            Iconify.addIcons(feedsFilteredMsg);\n+            feedsFilteredMsg.setVisibility(View.VISIBLE);\n+        } else {\n+            convertView.setEnabled(false);\n+            feedsFilteredMsg.setVisibility(View.GONE);\n+        }\n \n         return convertView;\n     }","input_nl":null,"output":"You can use `String.format` here.","target":"There is an option to hide the subscriptions list from the sidebar. If it is hidden, the filter text should not be displayed.","labels":"bug-fixing -> fix wrong behavior","first_category":"bug-fixing"}