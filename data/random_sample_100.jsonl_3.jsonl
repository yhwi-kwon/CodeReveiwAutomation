{"id": 70752, "task": "C2NL", "work": 4, "category": "C", "input_code": "@@ -34,7 +34,7 @@ import static org.apache.iceberg.TableProperties.DEFAULT_NAME_MAPPING;\n /**\n  * Context object with optional arguments for a Flink Scan.\n  */\n-class ScanContext implements Serializable {\n+public class ScanContext implements Serializable {\n \n   private static final long serialVersionUID = 1L;", "input_nl": null, "output": "Why make this `public`? It should not be used outside this class.", "target": "Why do we need to make so much more of this ScanContext public?", "labels": "object design principles -> encapsulation and scope -> change class visibility", "first_category": "object design principles", "primary_category": "object-design principles", "primary_subcategory": "Encapsulation and Scope", "primary_reason": "The change modifies the visibility of the `ScanContext` class from package-private to public, which directly relates to encapsulation and scope in object-oriented design.", "secondary_category": "refactoring", "secondary_subcategory": "Renaming", "secondary_reason": "While not a renaming in the traditional sense, changing the visibility of a class can be seen as a refactoring effort to improve the design and usability of the class within the codebase.", "tertiary_category": "other", "tertiary_subcategory": "Code Style", "tertiary_reason": "The change may also reflect adherence to coding standards or style guidelines that dictate class visibility, thus improving overall code style."}
{"id": 51647, "task": "C2NL", "work": 4, "category": "W", "input_code": "@@ -193,6 +193,18 @@ public abstract class Either<L, R> implements io.vavr.Iterable<R>, io.vavr.Value\n     /**\n      * Maps either the left or the right side of this disjunction.\n      *\n+     * <pre>{@code\n+     *Either<?, AtomicInteger> success = Either.right(new AtomicInteger(42));\n+     *\n+     * //prints \"Right(42)\"\n+     * System.out.println(success.bimap(Function1.identity(), AtomicInteger::get));\n+     *\n+     * Either<Exception, ?> failure = Either.left(new Exception(\"error\"));\n+     *\n+     * //prints \"Left(error)\"\n+     * System.out.println(failure.bimap(Exception::getMessage, Function1.identity()));\n+     * }</pre>\n+     *\n      * @param leftMapper  maps the left value if this is a Left\n      * @param rightMapper maps the right value if this is a Right\n      * @param <X>         The new left type of the resulting Either", "input_nl": null, "output": "Could you remove these `<pre>` tags?", "target": "one space missing at the beginning", "labels": "refactoring -> readability -> improve formatting -> add/remove white space(s)\nrefactoring -> readability -> improve formatting", "first_category": "refactoring;refactoring", "primary_category": "documentation", "primary_subcategory": "Improve behavior description", "primary_reason": "The changes involve adding detailed examples and usage descriptions in the form of code snippets to the documentation of the `bimap` method, which enhances the understanding of its functionality.", "secondary_category": "other", "secondary_subcategory": "Annotations", "secondary_reason": "The added code snippets are formatted using the `<pre>{@code ... }</pre>` annotation, which is a specific documentation style that improves the presentation of code examples.", "tertiary_category": "other", "tertiary_subcategory": "Code Style", "tertiary_reason": "The changes ensure adherence to documentation standards by providing clear and formatted examples, which is a part of maintaining code style in documentation."}
{"id": 51240, "task": "C2NL", "work": 4, "category": "W", "input_code": "@@ -296,9 +296,17 @@ public class NavListAdapter extends BaseAdapter\n                 .getSystemService(Context.LAYOUT_INFLATER_SERVICE);\n \n         convertView = inflater.inflate(R.layout.nav_section_item, parent, false);\n+        TextView feedsFilteredMsg = convertView.findViewById(R.id.nav_feeds_filtered_message);\n \n-        convertView.setEnabled(false);\n-        convertView.setOnClickListener(null);\n+        if (UserPreferences.getFeedFilter() != UserPreferences.FEED_FILTER_NONE) {\n+            convertView.setEnabled(true);\n+            feedsFilteredMsg.setText(\"{md-info-outline} \" + context.getString(R.string.feed_is_filtered));\n+            Iconify.addIcons(feedsFilteredMsg);\n+            feedsFilteredMsg.setVisibility(View.VISIBLE);\n+        } else {\n+            convertView.setEnabled(false);\n+            feedsFilteredMsg.setVisibility(View.GONE);\n+        }\n \n         return convertView;\n     }", "input_nl": null, "output": "You can use `String.format` here.", "target": "There is an option to hide the subscriptions list from the sidebar. If it is hidden, the filter text should not be displayed.", "labels": "bug-fixing -> fix wrong behavior", "first_category": "bug-fixing", "primary_category": "bug-fixing", "primary_subcategory": "Fix Wrong Behavior", "primary_reason": "The changes modify the behavior of the `convertView` based on the user's feed filter preference, enabling or disabling the view and updating the message accordingly. This directly addresses the logic of how the UI should respond to different states of user preferences.", "secondary_category": "refactoring", "secondary_subcategory": "Readability", "secondary_reason": "The addition of the `feedsFilteredMsg` TextView and the conditional logic improves the readability of the code by clearly separating the logic for when the feed is filtered versus when it is not, making it easier to understand the flow of the method.", "tertiary_category": "other", "tertiary_subcategory": "Improve Usability", "tertiary_reason": "The changes enhance the user experience by providing feedback through the `feedsFilteredMsg` when the feed is filtered, which improves usability by informing the user about the current state of the feed."}