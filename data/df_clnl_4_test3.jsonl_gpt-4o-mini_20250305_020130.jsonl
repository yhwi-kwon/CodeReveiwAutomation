{"id": 51152, "task": "C2NL", "work": 4, "category": "W", "input_code": "@@ -182,6 +182,7 @@ public class FetchActiveFlowDao {\n             + \" LEFT JOIN \"\n             + \" executors et ON ex.executor_id = et.id\"\n             + \" WHERE ex.status NOT IN (\"\n+            + Status.EXECUTION_STOPPED.getNumVal() + \", \"\n             + Status.SUCCEEDED.getNumVal() + \", \"\n             + Status.KILLED.getNumVal() + \", \"\n             + Status.FAILED.getNumVal() + \")\";", "input_nl": null, "output": "Shouldn't this be `Status.EXECUTION_FAILED.getNumVal()`?", "target": "This method can cause bugs. Why don't you use list of finalize statuses and then use join by comma and that will give you correct value. Use Apache Commons Lang library List<Integer> list = Arrays.asList(1,2,3,4,5,6,7); String str = org.apache.commons.lang.StringUtils.join(list, \",\"); You can use it at multiple places shown in this diff.", "labels": "bug-fixing -> fix wrong behavior\nrefactoring -> recommend alternative implementation", "first_category": "bug-fixing;refactoring", "primary_category": "bug-fixing", "primary_subcategory": "Fix Wrong Behavior", "primary_reason": "The added line modifies the SQL query by including a condition that references `Status.EXECUTION_STOPPED.getNumVal()`, indicating a fix to ensure that this particular status is appropriately excluded from the results. This suggests an adjustment in the logic to correct behavior in fetching active flows.", "secondary_category": "refactoring", "secondary_subcategory": "Readability", "secondary_reason": "The manner in which the new line was added (as a part of the query within string concatenation) may improve the clarity and structure of the SQL statement, making it more readable and maintainable. However, this is secondary to the primary function of the change.", "tertiary_category": "other", "tertiary_subcategory": "Process", "tertiary_reason": "While primarily focused on fixing a bug, the change does also touch upon potential benefits relating to how SQL queries are structured and constructed within the code but lacks a broader impact on the coding process itself. Since this context may warrant consideration, it is classified as \"Other\"."}
{"id": 51167, "task": "C2NL", "work": 4, "category": "W", "input_code": "@@ -969,8 +969,11 @@ public class VRBrowserActivity extends PlatformActivity implements WidgetManager\n         GleanMetricsService.stopImmersive();\n         Handler handler = new Handler(Looper.getMainLooper());\n         handler.postDelayed(() -> {\n-            mWindows.resumeCompositor();\n-            Log.d(LOGTAG, \"Compositor Resumed\");\n+            if (!mWindows.isPaused()) {\n+                Log.d(LOGTAG, \"Compositor resume begin\");\n+                mWindows.resumeCompositor();\n+                Log.d(LOGTAG, \"Compositor resume end\");\n+            }\n         }, 20);\n     }", "input_nl": null, "output": "Shouldn't this be `!mWindows.isPaused()`?", "target": "These logs should probably use the `LOGTAG`", "labels": "logging -> improve log message", "first_category": "logging", "primary_category": "refactoring", "primary_subcategory": "Simplify Logic", "primary_reason": "The code change modifies the logic by introducing a conditional check to only resume the compositor if the window is not paused. This makes the logic more explicit and potentially avoids unnecessary function calls.", "secondary_category": "logging", "secondary_subcategory": "Improve log message", "secondary_reason": "The logging enhancement includes more descriptive log messages that indicate the beginning and end of the compositor resume process, which improves the clarity of the logs for debugging purposes.", "tertiary_category": "bug-fixing", "tertiary_subcategory": "Improve Code Robustness", "tertiary_reason": "The addition of the conditional check (`if (!mWindows.isPaused())`) provides a safeguard to prevent inadvertent execution of `resumeCompositor()` in potentially inappropriate states, which enhances the robustness of the code."}
{"id": 51192, "task": "C2NL", "work": 4, "category": "W", "input_code": "@@ -57,6 +57,7 @@ public class TiConfiguration implements Serializable {\n   private static final int DEF_KV_CLIENT_CONCURRENCY = 10;\n   private static final List<TiStoreType> DEF_ISOLATION_READ_ENGINES =\n       ImmutableList.of(TiStoreType.TiKV, TiStoreType.TiFlash);\n+  private static final int DEF_PREWRITE_CONCURRENCY = 20;\n \n   private int timeout = DEF_TIMEOUT;\n   private TimeUnit timeoutUnit = DEF_TIMEOUT_UNIT;", "input_nl": null, "output": "Can we make this configurable?", "target": "delete this line", "labels": "refactoring -> readability -> remove unneeded code -> remove unneeded statement", "first_category": "refactoring", "primary_category": "refactoring", "primary_subcategory": "Typing", "primary_reason": "The addition of a new constant, `DEF_PREWRITE_CONCURRENCY`, likely improves the organization and maintainability of the code by defining a constant value as part of the class configuration parameters.", "secondary_category": "other", "secondary_subcategory": "Code Style", "secondary_reason": "While this addition of a constant may not specifically belong to a usual refactoring category, it enhances code style by defining defaults more clearly, showing adherence to best practices by avoiding hardcoded values directly in the code.", "tertiary_category": "documentation", "tertiary_subcategory": "Improve behavior description", "tertiary_reason": "The new constant might necessitate additional documentation to clarify its role within the class, although that action would typically be outside the direct scope of this change. Therefore, while indirectly related, it could lead to additional documentation enhancements."}